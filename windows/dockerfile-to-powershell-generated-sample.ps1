# Automatically generated by
#  dockerfile-to-powershell.py -d .\Dockerfile -p .\dockerfile-to-powershell-generated-sample.ps1 -a WINDOWS_VERSION=1809 -a DD_TARGET_ARCH=x64 
#  on 04/11/2022 13:29:14

# WARNING!!!
#  If this script had been generated from ...
#      https://github.com/DataDog/datadog-agent-buildimages/blob/main/windows/Dockerfile
#  ... which is currently based ...
#      on mcr.microsoft.com/dotnet/framework/runtime:4.8-windowsservercore-ltsc2019
#  ... image, then you will need to install .NET 4.8 before running it from one of three sources
#     * https://dotnet.microsoft.com/en-us/download/dotnet-framework/net48
#     * https://support.microsoft.com/en-us/topic/microsoft-net-framework-4-8-offline-installer-for-windows-9d23f658-3b97-68ab-d013-aa3c3e7495e0
#     * https://github.com/microsoft/dotnet-framework-docker/blob/528e53c63f429860d99d55409b0018d225059f0c/src/runtime/4.8/windowsservercore-ltsc2019/Dockerfile
#
#  Similarly, for other Dockerfiles you need to make sure that you prepare Windows machine to
#  be matching its Dockerfile's BASE image.
#
#  If you try to run this script more than once some commands may fail and break the script.
#  It may be addressed better in the future but for now you may need to comment out offending
#  commands. If after running generated from the Dockerfile Powershell script the Dockerfile
#  had been modified and you wish to apply these changes, then in contrast to applying newly
#  generated Powershell script your mileage may vary (and it depends very much on the Dockerfile
#  content) ...
#    * It may actually just work
#    * You may need to comment out everything except the difference between old and new
#      Powershell script
#    * You may need to explicitly uninstall or remove previously deployed applications, files
#      or other artifacts
#
# Usage: .\<this-script.ps1> -DockerRepoPath <repo path>
#    -DockerRepoPath is required parameter. You need to clone the
#    same repo as the one used for building Docker image.
#    Specifically it is https://github.com/DataDog/datadog-agent-buildimages
Param(
    [Parameter(Mandatory)]
    [string]
    $DockerRepoPath
)

$DockerRepoPathExists = Test-Path $DockerRepoPath
if (!$DockerRepoPathExists) {
    Write-Host "Provided 'DockerRepoPath' ($DockerRepoPath) path does not exist. Please provide valid argument"
    Exit
}
   
# Save current location and sync it to .NET current location (it is not automatic and needed in some cases)
#    https://stackoverflow.com/questions/11246068/why-dont-net-objects-in-powershell-use-the-current-directory
$origLocation = Get-Location
[Environment]::CurrentDirectory = $origLocation
# Currently Docker run everything in the root. And we have to keep it this way
Set-Location $origLocation

$totalStopwatch = [system.diagnostics.stopwatch]::StartNew()

function Update-SessionEnvironment {
   foreach ($s in 'Machine','User') {
      [Environment]::GetEnvironmentVariables($s).GetEnumerator().
      Where({$_.Key -ne 'PATH'}) | ForEach-Object {
      [Environment]::SetEnvironmentVariable($_.Key,$_.Value,'Process') }}

   $env:PATH = ( ('Machine','User').ForEach({
      [Environment]::GetEnvironmentVariable('PATH',$_)}).
      Split(';').Where({$_}) | Select-Object -Unique ) -join ';'
}
# Use the Microsoft-provided .NET Runtime 4.8 image as the base image
# because installing it in the image with Chocolatey requires a reboot.
# There is a bug in the February 11, 2020 update that makes commands fail in
# docker containers (see: https://support.microsoft.com/en-us/help/4542617/you-might-encounter-issues-when-using-windows-server-containers-with-t)
# To avoid that, there are two solutions:
# - both the host and the container must have the February 11, 2020 update, or
# - neither the host and the container must have the February 11, 2020 update.
# Since our 1809 windows-docker host image does not have this update, we use a base
# container image that does not have this update either (thus the 20200114 tag).
# On the contrary, since our 1909 windows-docker host image does have this update,
# we use a base container image that does have this update.
# TODO: Once the 1809 windows-docker host image is updated, update the base container image.
# Line: 14, Content: ARG BASE_IMAGE=mcr.microsoft.com/dotnet/framework/runtime:4.8-windowsservercore-ltsc2019

# Line: 16, Content: FROM ${BASE_IMAGE}
# Base Image: ${BASE_IMAGE}

# Line: 18, Content: SHELL ["powershell", "-Command"]
# SHELL="powershell -Command"

# Line: 20, Content: ARG WINDOWS_VERSION
# ARG=1809

# Line: 21, Content: ENV WINDOWS_VERSION=${WINDOWS_VERSION:-1809}
[System.Environment]::SetEnvironmentVariable('WINDOWS_VERSION','1809')

# Line: 23, Content: ARG DD_TARGET_ARCH
# ARG=x64

# Line: 24, Content: ENV TARGET_ARCH=${DD_TARGET_ARCH:-x64}
[System.Environment]::SetEnvironmentVariable('TARGET_ARCH','x64')

# Line: 26, Content: ENV GIT_VERSION "2.26.2"
[System.Environment]::SetEnvironmentVariable('GIT_VERSION','2.26.2')

# Line: 27, Content: ENV GIT_SHA256 "2dfbb1c46547c70179442a92b8593d592292b8bce2fd02ac4e0051a8072dde8f"
[System.Environment]::SetEnvironmentVariable('GIT_SHA256','2dfbb1c46547c70179442a92b8593d592292b8bce2fd02ac4e0051a8072dde8f')

# Line: 28, Content: ENV SEVENZIP_VERSION "19.0.0"
[System.Environment]::SetEnvironmentVariable('SEVENZIP_VERSION','19.0.0')

# Line: 29, Content: ENV SEVENZIP_SHA256 "0f5d4dbbe5e55b7aa31b91e5925ed901fdf46a367491d81381846f05ad54c45e"
[System.Environment]::SetEnvironmentVariable('SEVENZIP_SHA256','0f5d4dbbe5e55b7aa31b91e5925ed901fdf46a367491d81381846f05ad54c45e')

# Line: 30, Content: ENV VS2017BUILDTOOLS_VERSION "16.8.3.0"
[System.Environment]::SetEnvironmentVariable('VS2017BUILDTOOLS_VERSION','16.8.3.0')

# Line: 31, Content: ENV VS2017BUILDTOOLS_SHA256 "ccfb9355f4f753315455542f966025f96de734292d3908c8c3717e9685b709f0"
[System.Environment]::SetEnvironmentVariable('VS2017BUILDTOOLS_SHA256','ccfb9355f4f753315455542f966025f96de734292d3908c8c3717e9685b709f0')

#ENV VS2017BUILDTOOLS_DOWNLOAD_URL "https://download.visualstudio.microsoft.com/download/pr/d0eac510-174b-4241-b73b-93dc7cc1fbf7/9822b4c851e14d9658babd1533f66f518c6169196e985fe5713b2774128832ae/vs_BuildTools.exe"
# Line: 33, Content: ENV VS2017BUILDTOOLS_DOWNLOAD_URL "https://download.visualstudio.microsoft.com/download/pr/9b3476ff-6d0a-4ff8-956d-270147f21cd4/ccfb9355f4f753315455542f966025f96de734292d3908c8c3717e9685b709f0/vs_BuildTools.exe"
[System.Environment]::SetEnvironmentVariable('VS2017BUILDTOOLS_DOWNLOAD_URL','https://download.visualstudio.microsoft.com/download/pr/9b3476ff-6d0a-4ff8-956d-270147f21cd4/ccfb9355f4f753315455542f966025f96de734292d3908c8c3717e9685b709f0/vs_BuildTools.exe')

# Line: 34, Content: ENV GO_VERSION "1.17.6"
[System.Environment]::SetEnvironmentVariable('GO_VERSION','1.17.6')

# Line: 35, Content: ENV GO_SHA256 "5bf8f87aec7edfc08e6bc845f1c30dba6de32b863f89ae46553ff4bbcc1d4954"
[System.Environment]::SetEnvironmentVariable('GO_SHA256','5bf8f87aec7edfc08e6bc845f1c30dba6de32b863f89ae46553ff4bbcc1d4954')

# Line: 36, Content: ENV RUBY_VERSION "2.6.6-1"
[System.Environment]::SetEnvironmentVariable('RUBY_VERSION','2.6.6-1')

# Line: 37, Content: ENV RUBY_SHA256 "fbdf77a3e1fa36e25cf0af1303ac76f67dec7a6f739a829784a299702cad1492"
[System.Environment]::SetEnvironmentVariable('RUBY_SHA256','fbdf77a3e1fa36e25cf0af1303ac76f67dec7a6f739a829784a299702cad1492')

# Line: 38, Content: ENV IBM_MQ_VERSION "9.2.2.0"
[System.Environment]::SetEnvironmentVariable('IBM_MQ_VERSION','9.2.2.0')

# Line: 39, Content: ENV IBM_MQ_SHA256 "1cf718a4efc5d591452f1ebab5d880d9e52ef6447c5c8b098ccec2486bd74745"
[System.Environment]::SetEnvironmentVariable('IBM_MQ_SHA256','1cf718a4efc5d591452f1ebab5d880d9e52ef6447c5c8b098ccec2486bd74745')

# Line: 40, Content: ENV PYTHON_VERSION "3.8.2"
[System.Environment]::SetEnvironmentVariable('PYTHON_VERSION','3.8.2')

# Line: 41, Content: ENV PYTHON_SHA256 "8e400e3f32cdcb746e62e0db4d3ae4cba1f927141ebc4d0d5a4006b0daee8921"
[System.Environment]::SetEnvironmentVariable('PYTHON_SHA256','8e400e3f32cdcb746e62e0db4d3ae4cba1f927141ebc4d0d5a4006b0daee8921')

# Line: 42, Content: ENV WIX_VERSION "3.11.2"
[System.Environment]::SetEnvironmentVariable('WIX_VERSION','3.11.2')

# Line: 43, Content: ENV WIX_SHA256 "32bb76c478fcb356671d4aaf006ad81ca93eea32c22a9401b168fc7471feccd2"
[System.Environment]::SetEnvironmentVariable('WIX_SHA256','32bb76c478fcb356671d4aaf006ad81ca93eea32c22a9401b168fc7471feccd2')

# Line: 37, Content: ENV CMAKE_VERSION "3.23.0"
[System.Environment]::SetEnvironmentVariable('CMAKE_VERSION','3.23.0')

# Line: 45, Content: ENV CMAKE_SHA256 "06e999be9e50f9d33945aeae698b9b83678c3f98cedb3139a84e19636d2f6433"
[System.Environment]::SetEnvironmentVariable('CMAKE_SHA256','06e999be9e50f9d33945aeae698b9b83678c3f98cedb3139a84e19636d2f6433')

# Line: 46, Content: ENV MSYS_VERSION "20210725"
[System.Environment]::SetEnvironmentVariable('MSYS_VERSION','20210725')

# Line: 47, Content: ENV MSYS_SHA256 "4013a9d5e51b448343efc24fc6a324cc999bb96b4c01b13a6bd3c661bb5c8a82"
[System.Environment]::SetEnvironmentVariable('MSYS_SHA256','4013a9d5e51b448343efc24fc6a324cc999bb96b4c01b13a6bd3c661bb5c8a82')

# Line: 48, Content: ENV NUGET_VERSION "5.8.0"
[System.Environment]::SetEnvironmentVariable('NUGET_VERSION','5.8.0')

# Line: 49, Content: ENV NUGET_SHA256 "5c5b9c96165d3283b2cb9e5b65825d343e0e7139b9e70a250b4bb24c2285f3ba"
[System.Environment]::SetEnvironmentVariable('NUGET_SHA256','5c5b9c96165d3283b2cb9e5b65825d343e0e7139b9e70a250b4bb24c2285f3ba')

# Line: 50, Content: ENV EMBEDDED_PYTHON_2_VERSION "2.7.17"
[System.Environment]::SetEnvironmentVariable('EMBEDDED_PYTHON_2_VERSION','2.7.17')

# Line: 51, Content: ENV EMBEDDED_PYTHON_2_SHA256 "557ea6690c5927360656c003d3114b73adbd755b712a2911975dde813d6d7afb"
[System.Environment]::SetEnvironmentVariable('EMBEDDED_PYTHON_2_SHA256','557ea6690c5927360656c003d3114b73adbd755b712a2911975dde813d6d7afb')

# Line: 52, Content: ENV EMBEDDED_PYTHON_3_VERSION "3.8.1"
[System.Environment]::SetEnvironmentVariable('EMBEDDED_PYTHON_3_VERSION','3.8.1')

# Line: 53, Content: ENV EMBEDDED_PYTHON_3_SHA256 "58563ca60891025923572107e02b8f07439928eb5222dd10466cc92089072c2a"
[System.Environment]::SetEnvironmentVariable('EMBEDDED_PYTHON_3_SHA256','58563ca60891025923572107e02b8f07439928eb5222dd10466cc92089072c2a')

# Line: 54, Content: ENV EMBEDDED_PIP_VERSION "20.3.4"
[System.Environment]::SetEnvironmentVariable('EMBEDDED_PIP_VERSION','20.3.4')

# Line: 56, Content: ENV CACERTS_HASH "1979e7fe618c51ed1c9df43bba92f977a0d3fe7497ffa2a5e80dfc559a1e5a29"
[System.Environment]::SetEnvironmentVariable('CACERTS_HASH','1979e7fe618c51ed1c9df43bba92f977a0d3fe7497ffa2a5e80dfc559a1e5a29')

# Line: 57, Content: ENV CACERTS_VERSION "2022-03-29"
[System.Environment]::SetEnvironmentVariable('CACERTS_VERSION','2022-03-29')

# Line: 59, Content: LABEL target_agent="Agent 6/7"
# LABEL resolved: target_agent='Agent 6/7'

# Line: 60, Content: LABEL target_arch=${TARGET_ARCH}
# LABEL resolved: target_arch='x64'

# Line: 61, Content: LABEL windows_version=${WINDOWS_VERSION}
# LABEL resolved: windows_version='1809'

# Line: 62, Content: LABEL git_version=${GIT_VERSION}
# LABEL resolved: git_version='2.26.2'

# Line: 63, Content: LABEL sevenzip_version=${SEVENZIP_VERSION}
# LABEL resolved: sevenzip_version='19.0.0'

# Line: 64, Content: LABEL vs2017buildtools_version=${VS2017BUILDTOOLS_VERSION}
# LABEL resolved: vs2017buildtools_version='16.8.3.0'

# Line: 65, Content: LABEL go_version=${GO_VERSION}
# LABEL resolved: go_version='1.17.6'

# Line: 66, Content: LABEL ruby_version=${RUBY_VERSION}
# LABEL resolved: ruby_version='2.6.6-1'

# Line: 67, Content: LABEL wix_version=${WIX_VERSION}
# LABEL resolved: wix_version='3.11.2'

# Line: 68, Content: LABEL cmake_version=${CMAKE_VERSION}
# LABEL resolved: cmake_version='3.17.2'

# Line: 69, Content: LABEL msys_version=${MSYS_VERSION}
# LABEL resolved: msys_version='20210725'

# Line: 70, Content: LABEL system_python_version=${PYTHON_VERSION}
# LABEL resolved: system_python_version='3.8.2'

# Line: 71, Content: LABEL embedded_py2_version=${EMBEDDED_PYTHON_2_VERSION}
# LABEL resolved: embedded_py2_version='2.7.17'

# Line: 72, Content: LABEL embedded_py3_version=${EMBEDDED_PYTHON_3_VERSION}
# LABEL resolved: embedded_py3_version='3.8.1'

# Line: 73, Content: LABEL nuget_version=${NUGET_VERSION}
# LABEL resolved: nuget_version='5.8.0'

# Add certificates needed for build & check certificates file hash
# We need to trust the DigiCert High Assurance EV Root CA certificate, which signs python.org,
# to be able to download some Python components during the Agent build.
# Line: 77, Content: RUN (New-Object System.Net.WebClient).DownloadFile(\"https://curl.haxx.se/ca/cacert-${ENV:CACERTS_VERSION}.pem\", \"cacert.pem\")
$stopwatch = [system.diagnostics.stopwatch]::StartNew()
Write-Host @'
[1/57] Starting to (New-Object System.Net.WebClient).DownloadFile("https://curl.haxx.se/ca/cacert-${ENV:CACERTS_VERSION}.pem", "cacert.pem")
 ...
'@
(New-Object System.Net.WebClient).DownloadFile("https://curl.haxx.se/ca/cacert-${ENV:CACERTS_VERSION}.pem", "cacert.pem")
# Restore location and reload environment in case if they were changed
Set-Location $origLocation
# [Environment]::CurrentDirectory = $origLocation ## In some future cases this line may need to be executed
Update-SessionEnvironment
# Measure taken time
$stopwatch.Stop()
$timeTaken = $stopwatch.Elapsed.ToString("dd\.hh\:mm\:ss")
Write-Host "... this step executed in $timeTaken`n"

# Line: 78, Content: RUN if ((Get-FileHash -Algorithm SHA256 .\cacert.pem).Hash -ne \"$ENV:CACERTS_HASH\") { Write-Host \"Wrong hashsum for cacert.pem: got '$((Get-FileHash -Algorithm SHA256 .\cacert.pem).Hash)', expected '$ENV:CACERTS_HASH'.\"; exit 1 }
$stopwatch = [system.diagnostics.stopwatch]::StartNew()
Write-Host @'
[2/57] Starting to if ((Get-FileHash -Algorithm SHA256 .\cacert.pem).Hash -ne "$ENV:CACERTS_HASH") { Write-Host "Wrong hashsum for cacert.pem: got '$((Get-FileHash -Algorithm SHA256 .\cacert.pem).Hash)', expected '$ENV:CACERTS_HASH'."; exit 1 }
 ...
'@
if ((Get-FileHash -Algorithm SHA256 .\cacert.pem).Hash -ne "$ENV:CACERTS_HASH") { Write-Host "Wrong hashsum for cacert.pem: got '$((Get-FileHash -Algorithm SHA256 .\cacert.pem).Hash)', expected '$ENV:CACERTS_HASH'."; exit 1 }
# Restore location and reload environment in case if they were changed
Set-Location $origLocation
# [Environment]::CurrentDirectory = $origLocation ## In some future cases this line may need to be executed
Update-SessionEnvironment
# Measure taken time
$stopwatch.Stop()
$timeTaken = $stopwatch.Elapsed.ToString("dd\.hh\:mm\:ss")
Write-Host "... this step executed in $timeTaken`n"

# Line: 79, Content: RUN setx SSL_CERT_FILE \"C:\cacert.pem\"
$stopwatch = [system.diagnostics.stopwatch]::StartNew()
Write-Host @'
[3/57] Starting to setx SSL_CERT_FILE "C:\cacert.pem"
 ...
'@
setx SSL_CERT_FILE "C:\cacert.pem"
# Restore location and reload environment in case if they were changed
Set-Location $origLocation
# [Environment]::CurrentDirectory = $origLocation ## In some future cases this line may need to be executed
Update-SessionEnvironment
# Measure taken time
$stopwatch.Stop()
$timeTaken = $stopwatch.Elapsed.ToString("dd\.hh\:mm\:ss")
Write-Host "... this step executed in $timeTaken`n"

### Preliminary step: we need both the .NET 3.5 runtime and
### the .NET 4.8 runtime. To do this, we get 4.8 from a base image and we
### manually the install .NET Framework 3.5 runtime using the instructions in
### the mcr.microsoft.com/dotnet/framework/runtime:3.5 Dockerfile:
### https://github.com/microsoft/dotnet-framework-docker/blob/26597e42d157cc1e09d1e0dc8f23c32e6c3d1467/3.5/runtime/windowsservercore-ltsc2019/Dockerfile
### The .NET Fx 3.5 is needed for the Visual C++ Compiler for Python 2.7
### (https://www.microsoft.com/en-us/download/details.aspx?id=44266)
### and to work around a bug in the WiX 3.11 installer
### (https://github.com/wixtoolset/issues/issues/5661).
# Install .NET Fx 3.5
# Line: 93, Content: COPY ./windows/install_net35.ps1 install_net35.ps1
Write-Host @'
[4/57] Starting to copy $DockerRepoPath\.\windows\install_net35.ps1 install_net35.ps1 ...
'@
copy $DockerRepoPath\.\windows\install_net35.ps1 install_net35.ps1
Write-Host

# Line: 94, Content: RUN Powershell -C .\install_net35.ps1
$stopwatch = [system.diagnostics.stopwatch]::StartNew()
Write-Host @'
[5/57] Starting to .\install_net35.ps1
 ...
'@
.\install_net35.ps1
# Restore location and reload environment in case if they were changed
Set-Location $origLocation
# [Environment]::CurrentDirectory = $origLocation ## In some future cases this line may need to be executed
Update-SessionEnvironment
# Measure taken time
$stopwatch.Stop()
$timeTaken = $stopwatch.Elapsed.ToString("dd\.hh\:mm\:ss")
Write-Host "... this step executed in $timeTaken`n"

### End of preliminary step
# Install 7-zip
# Line: 99, Content: Copy ./windows/install_7zip.ps1 install_7zip.ps1
Write-Host @'
[6/57] Starting to copy $DockerRepoPath\.\windows\install_7zip.ps1 install_7zip.ps1 ...
'@
copy $DockerRepoPath\.\windows\install_7zip.ps1 install_7zip.ps1
Write-Host

# Line: 100, Content: RUN powershell -Command .\install_7zip.ps1 -Version $ENV:SEVENZIP_VERSION -Sha256 $ENV:SEVENZIP_SHA256
$stopwatch = [system.diagnostics.stopwatch]::StartNew()
Write-Host @'
[7/57] Starting to .\install_7zip.ps1 -Version $ENV:SEVENZIP_VERSION -Sha256 $ENV:SEVENZIP_SHA256
 ...
'@
.\install_7zip.ps1 -Version $ENV:SEVENZIP_VERSION -Sha256 $ENV:SEVENZIP_SHA256
# Restore location and reload environment in case if they were changed
Set-Location $origLocation
# [Environment]::CurrentDirectory = $origLocation ## In some future cases this line may need to be executed
Update-SessionEnvironment
# Measure taken time
$stopwatch.Stop()
$timeTaken = $stopwatch.Elapsed.ToString("dd\.hh\:mm\:ss")
Write-Host "... this step executed in $timeTaken`n"

# Install git
# Line: 103, Content: COPY ./windows/install_mingit.ps1 install_mingit.ps1
Write-Host @'
[8/57] Starting to copy $DockerRepoPath\.\windows\install_mingit.ps1 install_mingit.ps1 ...
'@
copy $DockerRepoPath\.\windows\install_mingit.ps1 install_mingit.ps1
Write-Host

# Line: 104, Content: RUN powershell -Command .\install_mingit.ps1 -Version $ENV:GIT_VERSION -Sha256 $ENV:GIT_SHA256
$stopwatch = [system.diagnostics.stopwatch]::StartNew()
Write-Host @'
[9/57] Starting to .\install_mingit.ps1 -Version $ENV:GIT_VERSION -Sha256 $ENV:GIT_SHA256
 ...
'@
.\install_mingit.ps1 -Version $ENV:GIT_VERSION -Sha256 $ENV:GIT_SHA256
# Restore location and reload environment in case if they were changed
Set-Location $origLocation
# [Environment]::CurrentDirectory = $origLocation ## In some future cases this line may need to be executed
Update-SessionEnvironment
# Measure taken time
$stopwatch.Stop()
$timeTaken = $stopwatch.Elapsed.ToString("dd\.hh\:mm\:ss")
Write-Host "... this step executed in $timeTaken`n"

### HACK: we disable symbolic links when cloning repositories
### to work around a symlink-related failure in the agent-binaries omnibus project
### when copying the datadog-agent project twice.
# Line: 109, Content: RUN git config --system core.symlinks false
$stopwatch = [system.diagnostics.stopwatch]::StartNew()
Write-Host @'
[10/57] Starting to git config --system core.symlinks false
 ...
'@
git config --system core.symlinks false
# Restore location and reload environment in case if they were changed
Set-Location $origLocation
# [Environment]::CurrentDirectory = $origLocation ## In some future cases this line may need to be executed
Update-SessionEnvironment
# Measure taken time
$stopwatch.Stop()
$timeTaken = $stopwatch.Elapsed.ToString("dd\.hh\:mm\:ss")
Write-Host "... this step executed in $timeTaken`n"

# Install VS2017
# Line: 112, Content: COPY ./windows/install_vstudio.ps1 install_vstudio.ps1
Write-Host @'
[11/57] Starting to copy $DockerRepoPath\.\windows\install_vstudio.ps1 install_vstudio.ps1 ...
'@
copy $DockerRepoPath\.\windows\install_vstudio.ps1 install_vstudio.ps1
Write-Host

# Line: 113, Content: RUN powershell -Command .\install_vstudio.ps1 -Version $ENV:VS2017BUILDTOOLS_VERSION -Sha256 $ENV:VS2017BUILDTOOLS_SHA256 $ENV:VS2017BUILDTOOLS_DOWNLOAD_URL
$stopwatch = [system.diagnostics.stopwatch]::StartNew()
Write-Host @'
[12/57] Starting to .\install_vstudio.ps1 -Version $ENV:VS2017BUILDTOOLS_VERSION -Sha256 $ENV:VS2017BUILDTOOLS_SHA256 $ENV:VS2017BUILDTOOLS_DOWNLOAD_URL
 ...
'@
.\install_vstudio.ps1 -Version $ENV:VS2017BUILDTOOLS_VERSION -Sha256 $ENV:VS2017BUILDTOOLS_SHA256 $ENV:VS2017BUILDTOOLS_DOWNLOAD_URL
# Restore location and reload environment in case if they were changed
Set-Location $origLocation
# [Environment]::CurrentDirectory = $origLocation ## In some future cases this line may need to be executed
Update-SessionEnvironment
# Measure taken time
$stopwatch.Stop()
$timeTaken = $stopwatch.Elapsed.ToString("dd\.hh\:mm\:ss")
Write-Host "... this step executed in $timeTaken`n"

# If x64, install the WDK for driver development
# Line: 116, Content: COPY ./windows/install_wdk.ps1 install_wdk.ps1
Write-Host @'
[13/57] Starting to copy $DockerRepoPath\.\windows\install_wdk.ps1 install_wdk.ps1 ...
'@
copy $DockerRepoPath\.\windows\install_wdk.ps1 install_wdk.ps1
Write-Host

# Line: 117, Content: RUN if ($Env:TARGET_ARCH -eq 'x64') { powershell -Command .\install_wdk.ps1 }
$stopwatch = [system.diagnostics.stopwatch]::StartNew()
Write-Host @'
[14/57] Starting to if ($Env:TARGET_ARCH -eq 'x64') { powershell -Command .\install_wdk.ps1 }
 ...
'@
if ($Env:TARGET_ARCH -eq 'x64') { powershell -Command .\install_wdk.ps1 }
# Restore location and reload environment in case if they were changed
Set-Location $origLocation
# [Environment]::CurrentDirectory = $origLocation ## In some future cases this line may need to be executed
Update-SessionEnvironment
# Measure taken time
$stopwatch.Stop()
$timeTaken = $stopwatch.Elapsed.ToString("dd\.hh\:mm\:ss")
Write-Host "... this step executed in $timeTaken`n"

# Install Wix and update PATH to include it
# Line: 120, Content: COPY ./windows/install_wix.ps1 install_wix.ps1
Write-Host @'
[15/57] Starting to copy $DockerRepoPath\.\windows\install_wix.ps1 install_wix.ps1 ...
'@
copy $DockerRepoPath\.\windows\install_wix.ps1 install_wix.ps1
Write-Host

# Line: 121, Content: RUN powershell -Command .\install_wix.ps1 -Version $ENV:WIX_VERSION -Sha256 $ENV:WIX_SHA256
$stopwatch = [system.diagnostics.stopwatch]::StartNew()
Write-Host @'
[16/57] Starting to .\install_wix.ps1 -Version $ENV:WIX_VERSION -Sha256 $ENV:WIX_SHA256
 ...
'@
.\install_wix.ps1 -Version $ENV:WIX_VERSION -Sha256 $ENV:WIX_SHA256
# Restore location and reload environment in case if they were changed
Set-Location $origLocation
# [Environment]::CurrentDirectory = $origLocation ## In some future cases this line may need to be executed
Update-SessionEnvironment
# Measure taken time
$stopwatch.Stop()
$timeTaken = $stopwatch.Elapsed.ToString("dd\.hh\:mm\:ss")
Write-Host "... this step executed in $timeTaken`n"

# Install dotnet core
# Line: 124, Content: COPY ./windows/install_dotnetcore.ps1 install_dotnetcore.ps1
Write-Host @'
[17/57] Starting to copy $DockerRepoPath\.\windows\install_dotnetcore.ps1 install_dotnetcore.ps1 ...
'@
copy $DockerRepoPath\.\windows\install_dotnetcore.ps1 install_dotnetcore.ps1
Write-Host

# Line: 125, Content: RUN powershell -Command .\install_dotnetcore.ps1
$stopwatch = [system.diagnostics.stopwatch]::StartNew()
Write-Host @'
[18/57] Starting to .\install_dotnetcore.ps1
 ...
'@
.\install_dotnetcore.ps1
# Restore location and reload environment in case if they were changed
Set-Location $origLocation
# [Environment]::CurrentDirectory = $origLocation ## In some future cases this line may need to be executed
Update-SessionEnvironment
# Measure taken time
$stopwatch.Stop()
$timeTaken = $stopwatch.Elapsed.ToString("dd\.hh\:mm\:ss")
Write-Host "... this step executed in $timeTaken`n"

# install nuget
# Line: 128, Content: COPY ./windows/install_nuget.ps1 install_nuget.ps1
Write-Host @'
[19/57] Starting to copy $DockerRepoPath\.\windows\install_nuget.ps1 install_nuget.ps1 ...
'@
copy $DockerRepoPath\.\windows\install_nuget.ps1 install_nuget.ps1
Write-Host

# Line: 129, Content: RUN powershell -Command .\install_nuget.ps1 -Version $ENV:NUGET_VERSION -Sha256 $ENV:NUGET_SHA256
$stopwatch = [system.diagnostics.stopwatch]::StartNew()
Write-Host @'
[20/57] Starting to .\install_nuget.ps1 -Version $ENV:NUGET_VERSION -Sha256 $ENV:NUGET_SHA256
 ...
'@
.\install_nuget.ps1 -Version $ENV:NUGET_VERSION -Sha256 $ENV:NUGET_SHA256
# Restore location and reload environment in case if they were changed
Set-Location $origLocation
# [Environment]::CurrentDirectory = $origLocation ## In some future cases this line may need to be executed
Update-SessionEnvironment
# Measure taken time
$stopwatch.Stop()
$timeTaken = $stopwatch.Elapsed.ToString("dd\.hh\:mm\:ss")
Write-Host "... this step executed in $timeTaken`n"

# Install VC compiler for Python 2.7
# Line: 132, Content: COPY ./windows/install_vcpython.ps1 install_vcpython.ps1
Write-Host @'
[21/57] Starting to copy $DockerRepoPath\.\windows\install_vcpython.ps1 install_vcpython.ps1 ...
'@
copy $DockerRepoPath\.\windows\install_vcpython.ps1 install_vcpython.ps1
Write-Host

# Line: 133, Content: RUN powershell -Command .\install_vcpython.ps1
$stopwatch = [system.diagnostics.stopwatch]::StartNew()
Write-Host @'
[22/57] Starting to .\install_vcpython.ps1
 ...
'@
.\install_vcpython.ps1
# Restore location and reload environment in case if they were changed
Set-Location $origLocation
# [Environment]::CurrentDirectory = $origLocation ## In some future cases this line may need to be executed
Update-SessionEnvironment
# Measure taken time
$stopwatch.Stop()
$timeTaken = $stopwatch.Elapsed.ToString("dd\.hh\:mm\:ss")
Write-Host "... this step executed in $timeTaken`n"

# Install IBM MQ
# Line: 136, Content: COPY ./windows/install_ibm_mq.ps1 install_ibm_mq.ps1
Write-Host @'
[23/57] Starting to copy $DockerRepoPath\.\windows\install_ibm_mq.ps1 install_ibm_mq.ps1 ...
'@
copy $DockerRepoPath\.\windows\install_ibm_mq.ps1 install_ibm_mq.ps1
Write-Host

# Line: 137, Content: RUN Powershell -C .\install_ibm_mq.ps1 -Version $ENV:IBM_MQ_VERSION -Sha256 $ENV:IBM_MQ_SHA256
$stopwatch = [system.diagnostics.stopwatch]::StartNew()
Write-Host @'
[24/57] Starting to .\install_ibm_mq.ps1 -Version $ENV:IBM_MQ_VERSION -Sha256 $ENV:IBM_MQ_SHA256
 ...
'@
.\install_ibm_mq.ps1 -Version $ENV:IBM_MQ_VERSION -Sha256 $ENV:IBM_MQ_SHA256
# Restore location and reload environment in case if they were changed
Set-Location $origLocation
# [Environment]::CurrentDirectory = $origLocation ## In some future cases this line may need to be executed
Update-SessionEnvironment
# Measure taken time
$stopwatch.Stop()
$timeTaken = $stopwatch.Elapsed.ToString("dd\.hh\:mm\:ss")
Write-Host "... this step executed in $timeTaken`n"

# Line: 138, Content: RUN setx MQ_FILE_PATH c:\ibm_mq
$stopwatch = [system.diagnostics.stopwatch]::StartNew()
Write-Host @'
[25/57] Starting to setx MQ_FILE_PATH c:\ibm_mq
 ...
'@
setx MQ_FILE_PATH c:\ibm_mq
# Restore location and reload environment in case if they were changed
Set-Location $origLocation
# [Environment]::CurrentDirectory = $origLocation ## In some future cases this line may need to be executed
Update-SessionEnvironment
# Measure taken time
$stopwatch.Stop()
$timeTaken = $stopwatch.Elapsed.ToString("dd\.hh\:mm\:ss")
Write-Host "... this step executed in $timeTaken`n"

# Install Cmake and update PATH to include it
# Line: 141, Content: COPY ./windows/install_cmake.ps1 install_cmake.ps1
Write-Host @'
[26/57] Starting to copy $DockerRepoPath\.\windows\install_cmake.ps1 install_cmake.ps1 ...
'@
copy $DockerRepoPath\.\windows\install_cmake.ps1 install_cmake.ps1
Write-Host

# Line: 142, Content: RUN powershell -Command .\install_cmake.ps1 -Version $ENV:CMAKE_VERSION -Sha256 $ENV:CMAKE_SHA256
$stopwatch = [system.diagnostics.stopwatch]::StartNew()
Write-Host @'
[27/57] Starting to .\install_cmake.ps1 -Version $ENV:CMAKE_VERSION -Sha256 $ENV:CMAKE_SHA256
 ...
'@
.\install_cmake.ps1 -Version $ENV:CMAKE_VERSION -Sha256 $ENV:CMAKE_SHA256
# Restore location and reload environment in case if they were changed
Set-Location $origLocation
# [Environment]::CurrentDirectory = $origLocation ## In some future cases this line may need to be executed
Update-SessionEnvironment
# Measure taken time
$stopwatch.Stop()
$timeTaken = $stopwatch.Elapsed.ToString("dd\.hh\:mm\:ss")
Write-Host "... this step executed in $timeTaken`n"

# Install golang and set GOPATH to the dev path used in builds & tests
# RUN cinst -y --no-progress golang $ENV:CHOCO_ARCH_FLAG --version $ENV:GO_VERSION
# Some go point releases are not available as chocolatey packages, we have to install them directly
# Line: 148, Content: COPY ./windows/install_go.ps1 install_go.ps1
Write-Host @'
[28/57] Starting to copy $DockerRepoPath\.\windows\install_go.ps1 install_go.ps1 ...
'@
copy $DockerRepoPath\.\windows\install_go.ps1 install_go.ps1
Write-Host

# Line: 149, Content: RUN powershell -C .\install_go.ps1
$stopwatch = [system.diagnostics.stopwatch]::StartNew()
Write-Host @'
[29/57] Starting to .\install_go.ps1
 ...
'@
.\install_go.ps1
# Restore location and reload environment in case if they were changed
Set-Location $origLocation
# [Environment]::CurrentDirectory = $origLocation ## In some future cases this line may need to be executed
Update-SessionEnvironment
# Measure taken time
$stopwatch.Stop()
$timeTaken = $stopwatch.Elapsed.ToString("dd\.hh\:mm\:ss")
Write-Host "... this step executed in $timeTaken`n"

# Line: 151, Content: RUN setx GOPATH C:\dev\go
$stopwatch = [system.diagnostics.stopwatch]::StartNew()
Write-Host @'
[30/57] Starting to setx GOPATH C:\dev\go
 ...
'@
setx GOPATH C:\dev\go
# Restore location and reload environment in case if they were changed
Set-Location $origLocation
# [Environment]::CurrentDirectory = $origLocation ## In some future cases this line may need to be executed
Update-SessionEnvironment
# Measure taken time
$stopwatch.Stop()
$timeTaken = $stopwatch.Elapsed.ToString("dd\.hh\:mm\:ss")
Write-Host "... this step executed in $timeTaken`n"

# Install system Python 3 (to use invoke).
# We always install the 64 bit version because vcredist140 won't work otherwise
# Line: 155, Content: COPY ./windows/install_python.ps1 install_python.ps1
Write-Host @'
[31/57] Starting to copy $DockerRepoPath\.\windows\install_python.ps1 install_python.ps1 ...
'@
copy $DockerRepoPath\.\windows\install_python.ps1 install_python.ps1
Write-Host

# Line: 156, Content: COPY ./requirements.txt ./requirements-py2.txt /
Write-Host @'
[32/57] Starting to copy $DockerRepoPath\.\requirements.txt \ ...
'@
copy $DockerRepoPath\.\requirements.txt \
Write-Host @'
[32/57] Starting to copy $DockerRepoPath\.\requirements-py2.txt \ ...
'@
copy $DockerRepoPath\.\requirements-py2.txt \
Write-Host

# Line: 157, Content: RUN powershell -C .\install_python.ps1 -Version $ENV:PYTHON_VERSION -Sha256 $ENV:PYTHON_SHA256
$stopwatch = [system.diagnostics.stopwatch]::StartNew()
Write-Host @'
[33/57] Starting to .\install_python.ps1 -Version $ENV:PYTHON_VERSION -Sha256 $ENV:PYTHON_SHA256
 ...
'@
.\install_python.ps1 -Version $ENV:PYTHON_VERSION -Sha256 $ENV:PYTHON_SHA256
# Restore location and reload environment in case if they were changed
Set-Location $origLocation
# [Environment]::CurrentDirectory = $origLocation ## In some future cases this line may need to be executed
Update-SessionEnvironment
# Measure taken time
$stopwatch.Stop()
$timeTaken = $stopwatch.Elapsed.ToString("dd\.hh\:mm\:ss")
Write-Host "... this step executed in $timeTaken`n"

# Install 64-bit ruby and bundler (for omnibus builds)
# Line: 160, Content: COPY ./windows/install_ruby.ps1 install_ruby.ps1
Write-Host @'
[34/57] Starting to copy $DockerRepoPath\.\windows\install_ruby.ps1 install_ruby.ps1 ...
'@
copy $DockerRepoPath\.\windows\install_ruby.ps1 install_ruby.ps1
Write-Host

# Line: 161, Content: RUN powershell -C .\install_ruby.ps1 -Version $ENV:RUBY_VERSION -Sha256 $ENV:RUBY_SHA256
$stopwatch = [system.diagnostics.stopwatch]::StartNew()
Write-Host @'
[35/57] Starting to .\install_ruby.ps1 -Version $ENV:RUBY_VERSION -Sha256 $ENV:RUBY_SHA256
 ...
'@
.\install_ruby.ps1 -Version $ENV:RUBY_VERSION -Sha256 $ENV:RUBY_SHA256
# Restore location and reload environment in case if they were changed
Set-Location $origLocation
# [Environment]::CurrentDirectory = $origLocation ## In some future cases this line may need to be executed
Update-SessionEnvironment
# Measure taken time
$stopwatch.Stop()
$timeTaken = $stopwatch.Elapsed.ToString("dd\.hh\:mm\:ss")
Write-Host "... this step executed in $timeTaken`n"

# Install msys2 system & install 64-bit C/C++ compilation toolchain
# Line: 164, Content: copy ./windows/install_msys.ps1 install_msys.ps1
Write-Host @'
[36/57] Starting to copy $DockerRepoPath\.\windows\install_msys.ps1 install_msys.ps1 ...
'@
copy $DockerRepoPath\.\windows\install_msys.ps1 install_msys.ps1
Write-Host

# Line: 165, Content: RUN powershell -C .\install_msys.ps1 -Version $ENV:MSYS_VERSION -Sha256 $ENV:MSYS_SHA256
$stopwatch = [system.diagnostics.stopwatch]::StartNew()
Write-Host @'
[37/57] Starting to .\install_msys.ps1 -Version $ENV:MSYS_VERSION -Sha256 $ENV:MSYS_SHA256
 ...
'@
.\install_msys.ps1 -Version $ENV:MSYS_VERSION -Sha256 $ENV:MSYS_SHA256
# Restore location and reload environment in case if they were changed
Set-Location $origLocation
# [Environment]::CurrentDirectory = $origLocation ## In some future cases this line may need to be executed
Update-SessionEnvironment
# Measure taken time
$stopwatch.Stop()
$timeTaken = $stopwatch.Elapsed.ToString("dd\.hh\:mm\:ss")
Write-Host "... this step executed in $timeTaken`n"

# Line: 167, Content: RUN ridk install 3
$stopwatch = [system.diagnostics.stopwatch]::StartNew()
Write-Host @'
[38/57] Starting to ridk install 3
 ...
'@
ridk install 3
# Restore location and reload environment in case if they were changed
Set-Location $origLocation
# [Environment]::CurrentDirectory = $origLocation ## In some future cases this line may need to be executed
Update-SessionEnvironment
# Measure taken time
$stopwatch.Stop()
$timeTaken = $stopwatch.Elapsed.ToString("dd\.hh\:mm\:ss")
Write-Host "... this step executed in $timeTaken`n"

# Downgrade gcc and binutils due to https://github.com/golang/go/issues/46099
# Line: 170, Content: RUN (New-Object System.Net.WebClient).DownloadFile(\"https://s3.amazonaws.com/dd-agent-omnibus/mingw-w64-x86_64-gcc-10.2.0-11-any.pkg.tar.zst\", \"C:/mingw-w64-x86_64-gcc-10.2.0-11-any.pkg.tar.zst\")
$stopwatch = [system.diagnostics.stopwatch]::StartNew()
Write-Host @'
[39/57] Starting to (New-Object System.Net.WebClient).DownloadFile("https://s3.amazonaws.com/dd-agent-omnibus/mingw-w64-x86_64-gcc-10.2.0-11-any.pkg.tar.zst", "C:/mingw-w64-x86_64-gcc-10.2.0-11-any.pkg.tar.zst")
 ...
'@
(New-Object System.Net.WebClient).DownloadFile("https://s3.amazonaws.com/dd-agent-omnibus/mingw-w64-x86_64-gcc-10.2.0-11-any.pkg.tar.zst", "C:/mingw-w64-x86_64-gcc-10.2.0-11-any.pkg.tar.zst")
# Restore location and reload environment in case if they were changed
Set-Location $origLocation
# [Environment]::CurrentDirectory = $origLocation ## In some future cases this line may need to be executed
Update-SessionEnvironment
# Measure taken time
$stopwatch.Stop()
$timeTaken = $stopwatch.Elapsed.ToString("dd\.hh\:mm\:ss")
Write-Host "... this step executed in $timeTaken`n"

# Line: 171, Content: RUN (New-Object System.Net.WebClient).DownloadFile(\"https://s3.amazonaws.com/dd-agent-omnibus/mingw-w64-x86_64-gcc-libs-10.2.0-11-any.pkg.tar.zst\", \"C:/mingw-w64-x86_64-gcc-libs-10.2.0-11-any.pkg.tar.zst\")
$stopwatch = [system.diagnostics.stopwatch]::StartNew()
Write-Host @'
[40/57] Starting to (New-Object System.Net.WebClient).DownloadFile("https://s3.amazonaws.com/dd-agent-omnibus/mingw-w64-x86_64-gcc-libs-10.2.0-11-any.pkg.tar.zst", "C:/mingw-w64-x86_64-gcc-libs-10.2.0-11-any.pkg.tar.zst")
 ...
'@
(New-Object System.Net.WebClient).DownloadFile("https://s3.amazonaws.com/dd-agent-omnibus/mingw-w64-x86_64-gcc-libs-10.2.0-11-any.pkg.tar.zst", "C:/mingw-w64-x86_64-gcc-libs-10.2.0-11-any.pkg.tar.zst")
# Restore location and reload environment in case if they were changed
Set-Location $origLocation
# [Environment]::CurrentDirectory = $origLocation ## In some future cases this line may need to be executed
Update-SessionEnvironment
# Measure taken time
$stopwatch.Stop()
$timeTaken = $stopwatch.Elapsed.ToString("dd\.hh\:mm\:ss")
Write-Host "... this step executed in $timeTaken`n"

# Line: 172, Content: RUN (New-Object System.Net.WebClient).DownloadFile(\"https://s3.amazonaws.com/dd-agent-omnibus/mingw-w64-x86_64-binutils-2.35.1-2-any.pkg.tar.zst\", \"C:/mingw-w64-x86_64-binutils-2.35.1-2-any.pkg.tar.zst\")
$stopwatch = [system.diagnostics.stopwatch]::StartNew()
Write-Host @'
[41/57] Starting to (New-Object System.Net.WebClient).DownloadFile("https://s3.amazonaws.com/dd-agent-omnibus/mingw-w64-x86_64-binutils-2.35.1-2-any.pkg.tar.zst", "C:/mingw-w64-x86_64-binutils-2.35.1-2-any.pkg.tar.zst")
 ...
'@
(New-Object System.Net.WebClient).DownloadFile("https://s3.amazonaws.com/dd-agent-omnibus/mingw-w64-x86_64-binutils-2.35.1-2-any.pkg.tar.zst", "C:/mingw-w64-x86_64-binutils-2.35.1-2-any.pkg.tar.zst")
# Restore location and reload environment in case if they were changed
Set-Location $origLocation
# [Environment]::CurrentDirectory = $origLocation ## In some future cases this line may need to be executed
Update-SessionEnvironment
# Measure taken time
$stopwatch.Stop()
$timeTaken = $stopwatch.Elapsed.ToString("dd\.hh\:mm\:ss")
Write-Host "... this step executed in $timeTaken`n"

# Line: 173, Content: RUN C:\tools\msys64\msys2_shell.cmd -defterm -no-start -c \"pacman --noconfirm -U /c/mingw-w64-x86_64-binutils-2.35.1-2-any.pkg.tar.zst /c/mingw-w64-x86_64-gcc-libs-10.2.0-11-any.pkg.tar.zst /c/mingw-w64-x86_64-gcc-10.2.0-11-any.pkg.tar.zst\"
$stopwatch = [system.diagnostics.stopwatch]::StartNew()
Write-Host @'
[42/57] Starting to C:\tools\msys64\msys2_shell.cmd -defterm -no-start -c "pacman --noconfirm -U /c/mingw-w64-x86_64-binutils-2.35.1-2-any.pkg.tar.zst /c/mingw-w64-x86_64-gcc-libs-10.2.0-11-any.pkg.tar.zst /c/mingw-w64-x86_64-gcc-10.2.0-11-any.pkg.tar.zst"
 ...
'@
C:\tools\msys64\msys2_shell.cmd -defterm -no-start -c "pacman --noconfirm -U /c/mingw-w64-x86_64-binutils-2.35.1-2-any.pkg.tar.zst /c/mingw-w64-x86_64-gcc-libs-10.2.0-11-any.pkg.tar.zst /c/mingw-w64-x86_64-gcc-10.2.0-11-any.pkg.tar.zst"
# Restore location and reload environment in case if they were changed
Set-Location $origLocation
# [Environment]::CurrentDirectory = $origLocation ## In some future cases this line may need to be executed
Update-SessionEnvironment
# Measure taken time
$stopwatch.Stop()
$timeTaken = $stopwatch.Elapsed.ToString("dd\.hh\:mm\:ss")
Write-Host "... this step executed in $timeTaken`n"

# Install docker, manifest-tool and notary
# Line: 176, Content: COPY ./windows/install_docker.ps1 install_docker.ps1
Write-Host @'
[43/57] Starting to copy $DockerRepoPath\.\windows\install_docker.ps1 install_docker.ps1 ...
'@
copy $DockerRepoPath\.\windows\install_docker.ps1 install_docker.ps1
Write-Host

# Line: 177, Content: RUN powershell -Command .\install_docker.ps1
$stopwatch = [system.diagnostics.stopwatch]::StartNew()
Write-Host @'
[44/57] Starting to .\install_docker.ps1
 ...
'@
.\install_docker.ps1
# Restore location and reload environment in case if they were changed
Set-Location $origLocation
# [Environment]::CurrentDirectory = $origLocation ## In some future cases this line may need to be executed
Update-SessionEnvironment
# Measure taken time
$stopwatch.Stop()
$timeTaken = $stopwatch.Elapsed.ToString("dd\.hh\:mm\:ss")
Write-Host "... this step executed in $timeTaken`n"

# Install google cloud SDK
# Line: 180, Content: COPY ./windows/install_gcloud_sdk.ps1 install_gcloud_sdk.ps1
Write-Host @'
[45/57] Starting to copy $DockerRepoPath\.\windows\install_gcloud_sdk.ps1 install_gcloud_sdk.ps1 ...
'@
copy $DockerRepoPath\.\windows\install_gcloud_sdk.ps1 install_gcloud_sdk.ps1
Write-Host

# Line: 181, Content: RUN powershell -C .\install_gcloud_sdk.ps1
$stopwatch = [system.diagnostics.stopwatch]::StartNew()
Write-Host @'
[46/57] Starting to .\install_gcloud_sdk.ps1
 ...
'@
.\install_gcloud_sdk.ps1
# Restore location and reload environment in case if they were changed
Set-Location $origLocation
# [Environment]::CurrentDirectory = $origLocation ## In some future cases this line may need to be executed
Update-SessionEnvironment
# Measure taken time
$stopwatch.Stop()
$timeTaken = $stopwatch.Elapsed.ToString("dd\.hh\:mm\:ss")
Write-Host "... this step executed in $timeTaken`n"

# Install embedded pythons (for unit testing)
# Line: 184, Content: COPY ./python-packages-versions.txt python-packages-versions.txt
Write-Host @'
[47/57] Starting to copy $DockerRepoPath\.\python-packages-versions.txt python-packages-versions.txt ...
'@
copy $DockerRepoPath\.\python-packages-versions.txt python-packages-versions.txt
Write-Host

# Line: 185, Content: COPY ./windows/install_embedded_pythons.ps1 install_embedded_pythons.ps1
Write-Host @'
[48/57] Starting to copy $DockerRepoPath\.\windows\install_embedded_pythons.ps1 install_embedded_pythons.ps1 ...
'@
copy $DockerRepoPath\.\windows\install_embedded_pythons.ps1 install_embedded_pythons.ps1
Write-Host

# Line: 186, Content: RUN powershell -C .\install_embedded_pythons.ps1
$stopwatch = [system.diagnostics.stopwatch]::StartNew()
Write-Host @'
[49/57] Starting to .\install_embedded_pythons.ps1
 ...
'@
.\install_embedded_pythons.ps1
# Restore location and reload environment in case if they were changed
Set-Location $origLocation
# [Environment]::CurrentDirectory = $origLocation ## In some future cases this line may need to be executed
Update-SessionEnvironment
# Measure taken time
$stopwatch.Stop()
$timeTaken = $stopwatch.Elapsed.ToString("dd\.hh\:mm\:ss")
Write-Host "... this step executed in $timeTaken`n"

# install vcpkg
# Line: 189, Content: COPY ./windows/install_vcpkg.ps1 install_vcpkg.ps1
Write-Host @'
[50/57] Starting to copy $DockerRepoPath\.\windows\install_vcpkg.ps1 install_vcpkg.ps1 ...
'@
copy $DockerRepoPath\.\windows\install_vcpkg.ps1 install_vcpkg.ps1
Write-Host

# Line: 190, Content: RUN powershell -Command .\install_vcpkg.ps1
$stopwatch = [system.diagnostics.stopwatch]::StartNew()
Write-Host @'
[51/57] Starting to .\install_vcpkg.ps1
 ...
'@
.\install_vcpkg.ps1
# Restore location and reload environment in case if they were changed
Set-Location $origLocation
# [Environment]::CurrentDirectory = $origLocation ## In some future cases this line may need to be executed
Update-SessionEnvironment
# Measure taken time
$stopwatch.Stop()
$timeTaken = $stopwatch.Elapsed.ToString("dd\.hh\:mm\:ss")
Write-Host "... this step executed in $timeTaken`n"

# Add signtool to path
# Line: 193, Content: RUN [Environment]::SetEnvironmentVariable(\"Path\", [Environment]::GetEnvironmentVariable(\"Path\", [EnvironmentVariableTarget]::Machine) + \";${env:ProgramFiles(x86)}\Windows Kits\8.1\bin\x64\", [System.EnvironmentVariableTarget]::Machine)
$stopwatch = [system.diagnostics.stopwatch]::StartNew()
Write-Host @'
[52/57] Starting to [Environment]::SetEnvironmentVariable("Path", [Environment]::GetEnvironmentVariable("Path", [EnvironmentVariableTarget]::Machine) + ";${env:ProgramFiles(x86)}\Windows Kits\8.1\bin\x64", [System.EnvironmentVariableTarget]::Machine)
 ...
'@
[Environment]::SetEnvironmentVariable("Path", [Environment]::GetEnvironmentVariable("Path", [EnvironmentVariableTarget]::Machine) + ";${env:ProgramFiles(x86)}\Windows Kits\8.1\bin\x64", [System.EnvironmentVariableTarget]::Machine)
# Restore location and reload environment in case if they were changed
Set-Location $origLocation
# [Environment]::CurrentDirectory = $origLocation ## In some future cases this line may need to be executed
Update-SessionEnvironment
# Measure taken time
$stopwatch.Stop()
$timeTaken = $stopwatch.Elapsed.ToString("dd\.hh\:mm\:ss")
Write-Host "... this step executed in $timeTaken`n"

# Set 32-bit flag env var
# Line: 196, Content: RUN if ($Env:TARGET_ARCH -eq 'x86') { setx WINDOWS_BUILD_32_BIT 1 }
$stopwatch = [system.diagnostics.stopwatch]::StartNew()
Write-Host @'
[53/57] Starting to if ($Env:TARGET_ARCH -eq 'x86') { setx WINDOWS_BUILD_32_BIT 1 }
 ...
'@
if ($Env:TARGET_ARCH -eq 'x86') { setx WINDOWS_BUILD_32_BIT 1 }
# Restore location and reload environment in case if they were changed
Set-Location $origLocation
# [Environment]::CurrentDirectory = $origLocation ## In some future cases this line may need to be executed
Update-SessionEnvironment
# Measure taken time
$stopwatch.Stop()
$timeTaken = $stopwatch.Elapsed.ToString("dd\.hh\:mm\:ss")
Write-Host "... this step executed in $timeTaken`n"

# Line: 198, Content: COPY ./windows/set_cpython_compiler.cmd set_cpython_compiler.cmd
Write-Host @'
[54/57] Starting to copy $DockerRepoPath\.\windows\set_cpython_compiler.cmd set_cpython_compiler.cmd ...
'@
copy $DockerRepoPath\.\windows\set_cpython_compiler.cmd set_cpython_compiler.cmd
Write-Host

# Line: 199, Content: RUN .\set_cpython_compiler.cmd
$stopwatch = [system.diagnostics.stopwatch]::StartNew()
Write-Host @'
[55/57] Starting to .\set_cpython_compiler.cmd
 ...
'@
.\set_cpython_compiler.cmd
# Restore location and reload environment in case if they were changed
Set-Location $origLocation
# [Environment]::CurrentDirectory = $origLocation ## In some future cases this line may need to be executed
Update-SessionEnvironment
# Measure taken time
$stopwatch.Stop()
$timeTaken = $stopwatch.Elapsed.ToString("dd\.hh\:mm\:ss")
Write-Host "... this step executed in $timeTaken`n"

# Line: 201, Content: COPY ./windows/entrypoint.bat /entrypoint.bat
Write-Host @'
[56/57] Starting to copy $DockerRepoPath\.\windows\entrypoint.bat \entrypoint.bat ...
'@
copy $DockerRepoPath\.\windows\entrypoint.bat \entrypoint.bat
Write-Host

# Line: 202, Content: COPY ./windows/aws_networking.ps1 /aws_networking.ps1
Write-Host @'
[57/57] Starting to copy $DockerRepoPath\.\windows\aws_networking.ps1 \aws_networking.ps1 ...
'@
copy $DockerRepoPath\.\windows\aws_networking.ps1 \aws_networking.ps1
Write-Host

# Line: 205, Content: ENTRYPOINT ["/entrypoint.bat"]


$totalStopwatch.Stop()
$timeTaken = $totalStopwatch.Elapsed.ToString("dd\.hh\:mm\:ss")
Write-Host "Script executed in $timeTaken"
