From a56c31337403f3608c0ff660b5005bed62d89241 Mon Sep 17 00:00:00 2001
From: Paul Cacheux <paul.cacheux@datadoghq.com>
Date: Mon, 2 Dec 2024 21:06:55 +0100
Subject: [PATCH 1/2] reflect: print reflected method

---
 src/reflect/type.go | 27 +++++++++++++++++++++++++++
 1 file changed, 27 insertions(+)

diff --git a/src/reflect/type.go b/src/reflect/type.go
index 07e2bf1644..f43d55ce72 100644
--- a/src/reflect/type.go
+++ b/src/reflect/type.go
@@ -644,10 +644,12 @@ func (t *rtype) Method(i int) (m Method) {
 	m.Func = Value{&mt.(*rtype).t, fn, fl}
 
 	m.Index = i
+	addReflectName(m.Name)
 	return m
 }
 
 func (t *rtype) MethodByName(name string) (m Method, ok bool) {
+	addReflectName(name)
 	if t.Kind() == Interface {
 		tt := (*interfaceType)(unsafe.Pointer(t))
 		return tt.MethodByName(name)
@@ -987,6 +989,7 @@ func (t *interfaceType) Method(i int) (m Method) {
 	}
 	m.Type = toType(t.typeOff(p.Typ))
 	m.Index = i
+	addReflectName(m.Name)
 	return
 }
 
@@ -995,6 +998,7 @@ func (t *interfaceType) NumMethod() int { return len(t.Methods) }
 
 // MethodByName method with the given name in the type's method set.
 func (t *interfaceType) MethodByName(name string) (m Method, ok bool) {
+	addReflectName(name)
 	if t == nil {
 		return
 	}
@@ -3084,3 +3088,26 @@ func TypeFor[T any]() Type {
 	}
 	return TypeOf((*T)(nil)).Elem() // only for an interface kind
 }
+
+var (
+	rmn                  sync.Mutex
+	reflectedMethodNames = map[string]struct{}{}
+)
+
+func addReflectName(name string) {
+	rmn.Lock()
+	defer rmn.Unlock()
+
+	reflectedMethodNames[name] = struct{}{}
+}
+
+func GetAllReflectedMethodNames() []string {
+	rmn.Lock()
+	defer rmn.Unlock()
+
+	var names []string
+	for name := range reflectedMethodNames {
+		names = append(names, name)
+	}
+	return names
+}
-- 
2.47.1


From 29f3bc66bc5a98d31118d9649a67f6500b9466b4 Mon Sep 17 00:00:00 2001
From: Paul Cacheux <paul.cacheux@datadoghq.com>
Date: Mon, 2 Dec 2024 15:34:54 +0100
Subject: [PATCH 2/2] deadcode: allow removal of more code in ld deadcode pass

---
 src/cmd/link/internal/ld/deadcode.go | 23 ++++++++++++++++++++++-
 src/cmd/link/internal/ld/main.go     |  1 +
 2 files changed, 23 insertions(+), 1 deletion(-)

diff --git a/src/cmd/link/internal/ld/deadcode.go b/src/cmd/link/internal/ld/deadcode.go
index 20609ed7bf..6bde0f0845 100644
--- a/src/cmd/link/internal/ld/deadcode.go
+++ b/src/cmd/link/internal/ld/deadcode.go
@@ -13,6 +13,7 @@ import (
 	"fmt"
 	"internal/abi"
 	"internal/buildcfg"
+	"slices"
 	"strings"
 	"unicode"
 )
@@ -452,7 +453,9 @@ func deadcode(ctxt *Link) {
 		// in the last pass.
 		rem := d.markableMethods[:0]
 		for _, m := range d.markableMethods {
-			if (d.reflectSeen && (m.isExported() || d.dynlink)) || d.ifaceMethod[m.m] || d.genericIfaceMethod[m.m.name] {
+			if d.reflectSeen && (m.isExported() || d.dynlink) && !d.reportDeadMethod(m) {
+				d.markMethod(m)
+			} else if d.ifaceMethod[m.m] || d.genericIfaceMethod[m.m.name] {
 				d.markMethod(m)
 			} else {
 				rem = append(rem, m)
@@ -471,6 +474,24 @@ func deadcode(ctxt *Link) {
 	}
 }
 
+var methodsToKeep []string
+
+func keepYsym(name string) {
+	methodsToKeep = append(methodsToKeep, name)
+}
+
+func (d *deadcodePass) reportDeadMethod(m methodref) bool {
+	if len(methodsToKeep) == 0 {
+		return false
+	}
+
+	if slices.Contains(methodsToKeep, m.m.name) {
+		return false
+	}
+
+	return true
+}
+
 // methodsig is a typed method signature (name + type).
 type methodsig struct {
 	name string
diff --git a/src/cmd/link/internal/ld/main.go b/src/cmd/link/internal/ld/main.go
index 12bc896c66..e17f8f2f08 100644
--- a/src/cmd/link/internal/ld/main.go
+++ b/src/cmd/link/internal/ld/main.go
@@ -200,6 +200,7 @@ func Main(arch *sys.Arch, theArch Arch) {
 	objabi.Flagfn1("L", "add specified `directory` to library path", func(a string) { Lflag(ctxt, a) })
 	objabi.AddVersionFlag() // -V
 	objabi.Flagfn1("X", "add string value `definition` of the form importpath.name=value", func(s string) { addstrdata1(ctxt, s) })
+	objabi.Flagfn1("Y", "add method name to keep from deadcode elimination", func(s string) { keepYsym(s) })
 	objabi.Flagcount("v", "print link trace", &ctxt.Debugvlog)
 	objabi.Flagfn1("importcfg", "read import configuration from `file`", ctxt.readImportCfg)
 
-- 
2.47.1

