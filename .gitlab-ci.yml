---
include:
  - https://gitlab-templates.ddbuild.io/slack-notifier/v3-sdm/template.yml
  - .gitlab/devcontainer.yml

stages:
  - setup
  - build
  - stats
  - availability_message
  - test
  - devcontainer
  - release
  - notify

variables:
  EXTRA_KCONFIG_VERSION: "0.1"
  ECR_TEST_ONLY: "_test_only"
  IMAGE_VERSION: "v$CI_PIPELINE_ID-${CI_COMMIT_SHORT_SHA}"
  S3_CP_CMD: aws s3 cp $S3_CP_OPTIONS

#
# Workflow rules
# Rules used to define whether a pipeline should run, and with which variables
#

.if_release_or_main_branch: &if_release_or_main_branch
  if: $CI_COMMIT_BRANCH =~ /^[0-9]+\.[0-9]+\.x$/ || $CI_COMMIT_BRANCH == "main"

.if_not_release_nor_main_branch: &if_not_release_nor_main_branch
  if: $CI_COMMIT_BRANCH !~ /^[0-9]+\.[0-9]+\.x$/ && $CI_COMMIT_BRANCH != "main"

.on_push:
  - if: $CI_PIPELINE_SOURCE == "schedule"
    when: never
  - if: $CI_COMMIT_TAG != null
    when: never
  - when: always

.on_default_branch_push:
  - if: $CI_PIPELINE_SOURCE == "schedule"
    when: never
  - if: $CI_COMMIT_TAG != null
    when: never
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    when: always

workflow:
  rules:
    - <<: *if_release_or_main_branch
      variables:
        # Don't use the `*_test_only` ECR for images built from commits that are on main or on a release branch
        ECR_TEST_ONLY: ""
    - <<: *if_not_release_nor_main_branch
      variables:
        # Use the `*_test_only` ECR for images built from commits that are not on main nor on a release branch
        ECR_TEST_ONLY: "_test_only"

default:
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
      - unknown_failure
      - api_failure

get_agent_version:
  stage: setup
  tags: ["arch:amd64"]
  image: $BUILDENV_REGISTRY/images/python:3.12.8
  script:
    - export DDA_VERSION=$(grep DDA_VERSION dda.env | awk -F= '/^DDA_VERSION=/ {print $2}')
    - pip install "dda==${DDA_VERSION}"
    - export PATH=/home/dog/.local/bin:$PATH
    - VERSION=$(dda run agent version)
    - echo "AGENT_VERSION=$VERSION"
    - echo "AGENT_VERSION=$VERSION" >> version.env
  artifacts:
    reports:
      dotenv: version.env

lint_dockerfiles:
  tags: ["arch:amd64"]
  stage: setup
  needs: []
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/images:v26997867-ebc48a76
  script:
    - hadolint dev-envs/linux/Dockerfile

.x64:
  tags: ["arch:amd64"]
  image: $BUILDENV_REGISTRY/images/docker:27.3.1
  variables:
    DD_TARGET_ARCH: x64
    PLATFORM: linux/amd64

.arm:
  tags: ["arch:arm64"]
  image: $BUILDENV_REGISTRY/images/docker:27.3.1
  variables:
    DD_TARGET_ARCH: aarch64
    PLATFORM: linux/arm64

.build:
  stage: build
  rules:
    - if: $CI_COMMIT_TAG == null
  script:
    # Build and push to internal ECR
    - GO_BUILD_ARGS=$(cat go.env | sed -e 's/^/--build-arg /' | tr '\n' ' ')
    - DDA_BUILD_ARGS=$(cat dda.env | sed -e 's/^/--build-arg /' | tr '\n' ' ')
    - CACHE_SOURCE="--cache-from type=registry,ref=registry.ddbuild.io/ci/datadog-agent-buildimages/$IMAGE${ECR_TEST_ONLY}:cache"
    # Do not use cache on official build, we just want to speed up the dev pipelines and want regular cache invalidations.
    - if [[ -z "$ECR_TEST_ONLY" ]]; then CACHE_SOURCE="--no-cache"; fi
    - PUSH=""
    - if [ "$CI_PIPELINE_SOURCE" != "schedule" ]; then PUSH="--push"; fi
    - >-
      docker buildx build --platform $PLATFORM $PUSH --pull
      ${CACHE_SOURCE}
      --cache-to type=registry,ref=registry.ddbuild.io/ci/datadog-agent-buildimages/$IMAGE${ECR_TEST_ONLY}:cache,mode=max
      --build-arg BASE_IMAGE=$BASE_IMAGE
      --build-arg DD_TARGET_ARCH=$DD_TARGET_ARCH
      $GO_BUILD_ARGS
      $DDA_BUILD_ARGS
      $CUSTOM_BUILD_ARGS
      --tag registry.ddbuild.io/ci/datadog-agent-buildimages/$IMAGE${ECR_TEST_ONLY}:$IMAGE_VERSION
      --file $DOCKERFILE .
      --output type=docker,dest=./$IMAGE-$IMAGE_VERSION.tar
  artifacts:
    paths: ["./$IMAGE-$IMAGE_VERSION.tar"]
    expire_in: 1 hour
  retry: 1 # Add a retry to prevent flakyness on build stage.

.docker_runner_amd:
  tags: ["runner:docker"]

.docker_runner_arm:
  tags: ["runner:docker-arm", "platform:arm64"]

.stats:
  stage: stats
  image: $BUILDENV_REGISTRY/images/docker:27.3.1
  rules:
    - if: $CI_COMMIT_TAG == null
  script:
    # For size debug purposes
    - docker load -i ./$IMAGE-$IMAGE_VERSION.tar
    - docker images registry.ddbuild.io/ci/datadog-agent-buildimages/$IMAGE${ECR_TEST_ONLY}:$IMAGE_VERSION
    - docker history --no-trunc registry.ddbuild.io/ci/datadog-agent-buildimages/$IMAGE${ECR_TEST_ONLY}:$IMAGE_VERSION
    - export SIZE=$(docker inspect -f "{{ .Size }}" registry.ddbuild.io/ci/datadog-agent-buildimages/$IMAGE${ECR_TEST_ONLY}:$IMAGE_VERSION)
    - ./send-metrics.sh $IMAGE $SIZE $CI_COMMIT_REF_NAME
    - |
      if [ "$CI_PIPELINE_SOURCE" != "schedule" ]; then
        echo -e "\033[0;32m\033[1mImage registry.ddbuild.io/ci/datadog-agent-buildimages/$IMAGE${ECR_TEST_ONLY}:$IMAGE_VERSION is available.\033[0m"
      else
        echo -e "\033[0;33m\033[1mScheduled pipeline, image push skipped.\033[0m"
      fi

stats_deb_x64:
  extends: [.stats, .docker_runner_amd]
  variables:
    IMAGE: deb_x64
  needs:
    - job: build_x64
      parallel:
        matrix:
          - DOCKERFILE: deb-x64/Dockerfile
            IMAGE: deb_x64

stats_rpm_x64:
  extends: [.stats, .docker_runner_amd]
  variables:
    IMAGE: rpm_x64
  needs:
    - job: build_x64
      parallel:
        matrix:
          - DOCKERFILE: rpm-x64/Dockerfile
            IMAGE: rpm_x64
            BASE_IMAGE: centos:7

stats_dd_agent_testing:
  extends: [.stats, .docker_runner_amd]
  variables:
    IMAGE: dd-agent-testing
  needs:
    - job: build_x64
      parallel:
        matrix:
          - DOCKERFILE: dd-agent-testing/Dockerfile
            IMAGE: dd-agent-testing

stats_docker_x64:
  extends: [.stats, .docker_runner_amd]
  variables:
    IMAGE: docker_x64
  needs:
    - job: build_x64
      parallel:
        matrix:
          - DOCKERFILE: docker-x64/Dockerfile
            IMAGE: docker_x64

stats_btf_gen:
  extends: [.stats, .docker_runner_amd]
  variables:
    IMAGE: btf-gen
  needs:
    - job: build_x64
      parallel:
        matrix:
          - DOCKERFILE: btf-gen/Dockerfile
            IMAGE: btf-gen

stats_kernel_version_testing:
  extends: [.stats, .docker_runner_amd]
  variables:
    IMAGE: kernel-version-testing_x64
  needs:
    - job: build_x64
      parallel:
        matrix:
          - CUSTOM_BUILD_ARGS: --build-arg KERNEL_EXTRA_CONFIG_VERSION=$EXTRA_KCONFIG_VERSION
            DOCKERFILE: kernel-version-testing/kernel-version-testing_x64/Dockerfile
            IMAGE: kernel-version-testing_x64

stats_gitlab_agent_deploy:
  extends: [.stats, .docker_runner_amd]
  variables:
    IMAGE: gitlab_agent_deploy
  needs:
    - job: build_x64
      parallel:
        matrix:
          - DOCKERFILE: agent-deploy/Dockerfile
            IMAGE: gitlab_agent_deploy

stats_linux_glibc_2_17_x64:
  extends: [.stats, .docker_runner_amd]
  variables:
    IMAGE: linux-glibc-2-17-x64
  needs:
    - job: build_x64
      parallel:
        matrix:
          - DOCKERFILE: linux-glibc-2.17-x64/Dockerfile
            IMAGE: linux-glibc-2-17-x64

stats_deb_arm64:
  extends: [.stats, .docker_runner_arm]
  variables:
    IMAGE: deb_arm64
  needs:
    - job: build_arm64
      parallel:
        matrix:
          - DOCKERFILE: deb-arm/Dockerfile
            IMAGE: deb_arm64
            BASE_IMAGE: arm64v8/ubuntu:16.04

stats_deb_armhf:
  extends: [.stats, .docker_runner_arm]
  variables:
    IMAGE: deb_armhf
  needs:
    - job: build_arm64
      parallel:
        matrix:
          - DOCKERFILE: deb-arm/Dockerfile
            IMAGE: deb_armhf
            BASE_IMAGE: arm32v7/ubuntu:16.04
            DD_TARGET_ARCH: armhf

stats_rpm_arm64:
  extends: [.stats, .docker_runner_arm]
  variables:
    IMAGE: rpm_arm64
  needs:
    - job: build_arm64
      parallel:
        matrix:
          - DOCKERFILE: rpm-arm64/Dockerfile
            IMAGE: rpm_arm64
            BASE_IMAGE: amazonlinux:2.0.20181114

stats_rpm_armhf:
  extends: [.stats, .docker_runner_arm]
  variables:
    IMAGE: rpm_armhf
  needs:
    - job: build_arm64
      parallel:
        matrix:
          - DOCKERFILE: rpm-armhf/Dockerfile
            IMAGE: rpm_armhf
            BASE_IMAGE: arm32v7/centos:7
            DD_TARGET_ARCH: armhf

stats_docker_arm64:
  extends: [.stats, .docker_runner_arm]
  variables:
    IMAGE: docker_arm64
  needs:
    - job: build_arm64
      parallel:
        matrix:
          - DOCKERFILE: docker-arm64/Dockerfile
            IMAGE: docker_arm64

stats_kernel_version_testing_arm64:
  extends: [.stats, .docker_runner_arm]
  variables:
    IMAGE: kernel-version-testing_arm64
  needs:
    - job: build_arm64
      parallel:
        matrix:
          - CUSTOM_BUILD_ARGS: --build-arg KERNEL_EXTRA_CONFIG_VERSION=$EXTRA_KCONFIG_VERSION
            DOCKERFILE: kernel-version-testing/kernel-version-testing_arm64/Dockerfile
            IMAGE: kernel-version-testing_arm64

stats_linux_glibc_2_23_arm64:
  extends: [.stats, .docker_runner_arm]
  variables:
    IMAGE: linux-glibc-2-23-arm64
  needs:
    - job: build_arm64
      parallel:
        matrix:
          - DOCKERFILE: linux-glibc-2.23-arm64/Dockerfile
            IMAGE: linux-glibc-2-23-arm64

.build_dev_env:
  stage: build
  rules:
    - if: $CI_COMMIT_TAG == null && $CI_PIPELINE_SOURCE != "schedule"
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
  script:
    - CACHE_SOURCE="--cache-from type=registry,ref=registry.ddbuild.io/ci/datadog-agent-buildimages/dev-env-$PLATFORM:cache"
    # Do not use cache on official build, we just want to speed up the dev pipelines and want regular cache invalidations.
    - if [[ -z "$ECR_TEST_ONLY" ]]; then CACHE_SOURCE="--no-cache"; fi
    - PUSH=""
    - if [ "$CI_PIPELINE_SOURCE" != "schedule" ]; then PUSH="--push"; fi
    # Build and push to internal ECR
    - >-
      docker buildx build --platform $PLATFORM $PUSH --pull
      ${CACHE_SOURCE}
      --cache-to type=registry,ref=registry.ddbuild.io/ci/datadog-agent-buildimages/dev-env-$PLATFORM:cache,mode=max
      --build-arg BASE_IMAGE=$BASE_IMAGE
      --build-arg BASE_IMAGE_TAG=$BASE_IMAGE_TAG
      --tag registry.ddbuild.io/ci/datadog-agent-buildimages/dev-env-$PLATFORM:$DD_TARGET_ARCH
      dev-envs/$PLATFORM

build_x64:
  extends: [.build, .x64]
  parallel:
    matrix:
      - DOCKERFILE: deb-x64/Dockerfile
        IMAGE: deb_x64
      - DOCKERFILE: rpm-x64/Dockerfile
        IMAGE: rpm_x64
        BASE_IMAGE: centos:7
      - DOCKERFILE: dd-agent-testing/Dockerfile
        IMAGE: dd-agent-testing
      - DOCKERFILE: docker-x64/Dockerfile
        IMAGE: docker_x64
      - DOCKERFILE: btf-gen/Dockerfile
        IMAGE: btf-gen
      - CUSTOM_BUILD_ARGS: --build-arg KERNEL_EXTRA_CONFIG_VERSION=$EXTRA_KCONFIG_VERSION
        DOCKERFILE: kernel-version-testing/kernel-version-testing_x64/Dockerfile
        IMAGE: kernel-version-testing_x64
      - DOCKERFILE: agent-deploy/Dockerfile
        IMAGE: gitlab_agent_deploy
      - DOCKERFILE: linux-glibc-2.17-x64/Dockerfile
        IMAGE: linux-glibc-2-17-x64

build_arm64:
  extends: [.build, .arm]
  parallel:
    matrix:
      - DOCKERFILE: deb-arm/Dockerfile
        IMAGE: deb_arm64
        BASE_IMAGE: arm64v8/ubuntu:16.04
      - DOCKERFILE: deb-arm/Dockerfile
        IMAGE: deb_armhf
        BASE_IMAGE: arm32v7/ubuntu:16.04
        DD_TARGET_ARCH: armhf
      - DOCKERFILE: rpm-arm64/Dockerfile
        IMAGE: rpm_arm64
        BASE_IMAGE: amazonlinux:2.0.20181114
      - DOCKERFILE: rpm-armhf/Dockerfile
        IMAGE: rpm_armhf
        BASE_IMAGE: arm32v7/centos:7
        DD_TARGET_ARCH: armhf
      - DOCKERFILE: docker-arm64/Dockerfile
        IMAGE: docker_arm64
      - CUSTOM_BUILD_ARGS: --build-arg KERNEL_EXTRA_CONFIG_VERSION=$EXTRA_KCONFIG_VERSION
        DOCKERFILE: kernel-version-testing/kernel-version-testing_arm64/Dockerfile
        IMAGE: kernel-version-testing_arm64
      - DOCKERFILE: linux-glibc-2.23-arm64/Dockerfile
        IMAGE: linux-glibc-2-23-arm64

build_dev_env_linux_x64:
  extends: [.build_dev_env, .x64]
  needs:
    - job: build_x64
      parallel:
        matrix:
          - DOCKERFILE: linux-glibc-2.17-x64/Dockerfile
            IMAGE: linux-glibc-2-17-x64
  variables:
    PLATFORM: linux
    BASE_IMAGE: registry.ddbuild.io/ci/datadog-agent-buildimages/linux-glibc-2-17-x64$ECR_TEST_ONLY
    BASE_IMAGE_TAG: $IMAGE_VERSION

build_dev_env_linux_arm64:
  extends: [.build_dev_env, .arm]
  needs:
    - job: build_arm64
      parallel:
        matrix:
          - DOCKERFILE: linux-glibc-2.23-arm64/Dockerfile
            IMAGE: linux-glibc-2-23-arm64
  variables:
    PLATFORM: linux
    BASE_IMAGE: registry.ddbuild.io/ci/datadog-agent-buildimages/linux-glibc-2-23-arm64$ECR_TEST_ONLY
    BASE_IMAGE_TAG: $IMAGE_VERSION

build_windows_ltsc2022_x64:
  stage: build
  rules:
    - if: $CI_COMMIT_TAG == null
  timeout: 2h 00m
  tags: ["windows-v2:2022"]
  id_tokens:
    CI_IDENTITY_GITLAB_JWT:
      aud: https://vault.us1.ddbuild.io
  variables:
    CI_IDENTITY_ROLE_NAME_OVERRIDE: windows-ci-tmp-gitlab-id-token-datadog-agent-buildimages-all-refs
    DOCKERFILE: windows/Dockerfile
    IMAGE: windows_ltsc2022_x64
    DD_TARGET_ARCH: x64
  script:
    - '$_instance_id = (iwr  -UseBasicParsing http://169.254.169.254/latest/meta-data/instance-id).content ; Write-Host "Running on instance $($_instance_id)"'
    - $SRC_IMAGE = "registry.ddbuild.io/ci/datadog-agent-buildimages/${IMAGE}${ECR_TEST_ONLY}:${IMAGE_VERSION}"
    - .\build-container.ps1 -Arch $DD_TARGET_ARCH -Tag $SRC_IMAGE
    - If ($lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
    - If ($CI_PIPELINE_SOURCE -ne "schedule") { docker push $SRC_IMAGE } else { exit 0 }
    - If ($lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
  after_script:
    - $SRC_IMAGE = "registry.ddbuild.io/ci/datadog-agent-buildimages/${IMAGE}${ECR_TEST_ONLY}:${IMAGE_VERSION}"
    - docker rmi $SRC_IMAGE
    - If ($CI_JOB_STATUS -ne "success") { Write-Host "Build failed."; exit 0 }
    - If ($CI_PIPELINE_SOURCE -ne "schedule") { Write-Host "Image $SRC_IMAGE is available." } else { Write-Host "Scheduled pipeline, image push skipped." }

trigger_build_kernels:
  stage: test
  needs:
    - job: build_x64
      parallel:
        matrix:
        - CUSTOM_BUILD_ARGS: --build-arg KERNEL_EXTRA_CONFIG_VERSION=$EXTRA_KCONFIG_VERSION
          DOCKERFILE: kernel-version-testing/kernel-version-testing_x64/Dockerfile
          IMAGE: kernel-version-testing_x64
    - job: build_arm64
      parallel:
        matrix:
        - CUSTOM_BUILD_ARGS: --build-arg KERNEL_EXTRA_CONFIG_VERSION=$EXTRA_KCONFIG_VERSION
          DOCKERFILE: kernel-version-testing/kernel-version-testing_arm64/Dockerfile
          IMAGE: kernel-version-testing_arm64
  rules:
    - when: manual
      allow_failure: true
  # Pass variables to the child pipeline
  variables:
    PARENT_EXTRA_KCONFIG_VERSION: $EXTRA_KCONFIG_VERSION
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
  trigger:
    include:
      - local: .gitlab/kernel_version_testing.yml
    strategy: depend

trigger_tests:
  stage: test
  rules:
    - when: manual
      allow_failure: true
  variables:
    RUN_KITCHEN_TESTS: "false"
    BUCKET_BRANCH: "dev"
    DATADOG_AGENT_BUILDIMAGES: "v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}"
    DATADOG_AGENT_BUILDIMAGES_SUFFIX: "${ECR_TEST_ONLY}"
    DATADOG_AGENT_WINBUILDIMAGES_SUFFIX: "${ECR_TEST_ONLY}"
    DATADOG_AGENT_WINBUILDIMAGES: "v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}"
    DATADOG_AGENT_ARMBUILDIMAGES_SUFFIX: "${ECR_TEST_ONLY}"
    DATADOG_AGENT_ARMBUILDIMAGES: "v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}"
  trigger:
    project: DataDog/datadog-agent
    strategy: depend

push_to_datadog_agent:
  stage: test
  rules:
    - if: $CI_COMMIT_MESSAGE !~ /^\[push_to_datadog_agent\]/
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: never
    - !reference [.on_push]
  tags: ["arch:amd64"]
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/deb_x64:v58799063-651eeeea
  variables:
    SSM_GITHUB_APP_KEY: ci.datadog-agent.platform-github-app-key
    GITHUB_INSTALLATION_ID: 45116690
    GITHUB_APP_ID: 682216
    REF: main
    BRANCH: buildimages/$CI_COMMIT_BRANCH
    IMAGES_ID: v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}
  script:
    - source /root/.bashrc
    - set -o pipefail
    # Get the current go version from the go.env file
    - >
      for line in $(cat go.env); do
        export $line
      done
    # Read the Github app private token from AWS SSM
    - export GITHUB_KEY_B64=$(aws ssm get-parameter --region us-east-1 --name $SSM_GITHUB_APP_KEY --with-decryption --query "Parameter.Value" --out text)
    - export DDA_VERSION=$(grep DDA_VERSION dda.env | awk -F= '/^DDA_VERSION=/ {print $2}')
    - pip install "dda==${DDA_VERSION}"
    - dda -v self dep sync -f legacy-build
    - dda inv buildimages.update --images-id "$IMAGES_ID" --ref "$REF" --branch "$BRANCH" --test-version

release:
  stage: release
  rules:
    - !reference [.on_default_branch_push]
  trigger:
    project: DataDog/public-images
    branch: main
    strategy: depend
  variables:
    IMG_REGISTRIES: dockerhub
    IMG_SIGNING: "false"
  # We cannot use the $IMAGE_VERSION variable directly because there is only one step of variable substitution, see https://forum.gitlab.com/t/inconsistent-variable-behavior-in-multi-project-pipeline/77916. We must use v${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA} instead.
  parallel:
    matrix:
      - IMG_SOURCES: registry.ddbuild.io/ci/datadog-agent-buildimages/dev-env-linux:x64,registry.ddbuild.io/ci/datadog-agent-buildimages/dev-env-linux:aarch64
        IMG_DESTINATIONS: agent-dev-env-linux:v$CI_PIPELINE_ID-${CI_COMMIT_SHORT_SHA},agent-dev-env-linux:latest
      - IMG_SOURCES: registry.ddbuild.io/ci/datadog-agent-buildimages/deb_x64:v$CI_PIPELINE_ID-${CI_COMMIT_SHORT_SHA}
        IMG_DESTINATIONS: agent-buildimages-deb_x64:v$CI_PIPELINE_ID-${CI_COMMIT_SHORT_SHA},agent-buildimages-deb_x64:latest
      - IMG_SOURCES: registry.ddbuild.io/ci/datadog-agent-buildimages/deb_arm64:v$CI_PIPELINE_ID-${CI_COMMIT_SHORT_SHA}
        IMG_DESTINATIONS: agent-buildimages-deb_arm64:v$CI_PIPELINE_ID-${CI_COMMIT_SHORT_SHA},agent-buildimages-deb_arm64:latest
      - IMG_SOURCES: registry.ddbuild.io/ci/datadog-agent-buildimages/rpm_x64:v$CI_PIPELINE_ID-${CI_COMMIT_SHORT_SHA}
        IMG_DESTINATIONS: agent-buildimages-rpm_x64:v$CI_PIPELINE_ID-${CI_COMMIT_SHORT_SHA},agent-buildimages-rpm_x64:latest
      - IMG_SOURCES: registry.ddbuild.io/ci/datadog-agent-buildimages/rpm_arm64:v$CI_PIPELINE_ID-${CI_COMMIT_SHORT_SHA}
        IMG_DESTINATIONS: agent-buildimages-rpm_arm64:v$CI_PIPELINE_ID-${CI_COMMIT_SHORT_SHA},agent-buildimages-rpm_arm64:latest
      - IMG_SOURCES: registry.ddbuild.io/ci/datadog-agent-buildimages/linux-glibc-2-17-x64:v$CI_PIPELINE_ID-${CI_COMMIT_SHORT_SHA}
        IMG_DESTINATIONS: agent-buildimages-linux-glibc-2-17-x64:v$CI_PIPELINE_ID-${CI_COMMIT_SHORT_SHA},agent-buildimages-linux-glibc-2-17-x64:latest
      - IMG_SOURCES: registry.ddbuild.io/ci/datadog-agent-buildimages/linux-glibc-2-23-arm64:v$CI_PIPELINE_ID-${CI_COMMIT_SHORT_SHA}
        IMG_DESTINATIONS: agent-buildimages-linux-glibc-2-23-arm64:v$CI_PIPELINE_ID-${CI_COMMIT_SHORT_SHA},agent-buildimages-linux-glibc-2-23-arm64:latest
      - IMG_SOURCES: registry.ddbuild.io/ci/datadog-agent-buildimages/windows_ltsc2022_x64:v$CI_PIPELINE_ID-${CI_COMMIT_SHORT_SHA}
        IMG_DESTINATIONS: agent-buildimages-windows_x64:ltsc2022-v$CI_PIPELINE_ID-${CI_COMMIT_SHORT_SHA},agent-buildimages-windows_x64:ltsc2022

notify-images-available:
  extends: .slack-notifier-base
  stage: availability_message # Created a new stage to depend upon all image builds without explicitely name them in 'needs'
  rules:
    - if: $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "main"
      when: never
    - when: on_success
  dependencies: []
  script: |
    COMMIT_URL="$CI_PROJECT_URL/commit/$CI_COMMIT_SHA"
    BRANCH_URL="$CI_PROJECT_URL/tree/$CI_COMMIT_BRANCH"
    export MESSAGE="Your :docker: images with tag \`$IMAGE_VERSION\` are ready.
    :git: Branch <$BRANCH_URL|$CI_COMMIT_BRANCH> for commit \`$CI_COMMIT_TITLE\` (<$COMMIT_URL|$CI_COMMIT_SHORT_SHA>)
    :idea: You can test them in the \`datadog-agent\` repository by running:
    \`\`\`inv buildimages.update -t $IMAGE_VERSION [--no-test] [-i <image_name>]\`\`\`
    Or run the \`trigger_tests\` manual job in your \`datadog-agent-buildimages\` <$CI_PIPELINE_URL|pipeline>."
    /usr/local/bin/notify.sh

notify-images-failure:
  extends: .slack-notifier-base
  stage: availability_message
  rules:
    - if: $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "main"
      when: never
    - when: on_failure
  dependencies: []
  script: |
    COMMIT_URL="$CI_PROJECT_URL/commit/$CI_COMMIT_SHA"
    BRANCH_URL="$CI_PROJECT_URL/tree/$CI_COMMIT_BRANCH"
    export MESSAGE=":warning: Your :docker: images with tag \`$IMAGE_VERSION\` failed to build. :warning:
    :git: Branch <$BRANCH_URL|$CI_COMMIT_BRANCH> for commit \`$CI_COMMIT_TITLE\` (<$COMMIT_URL|$CI_COMMIT_SHORT_SHA>)
    More details :arrow_right:"
    /usr/local/bin/notify.sh

notify-on-failure:
  extends: .slack-notifier-base
  rules:
    - if: $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "main"
      when: on_failure
  dependencies: []
  script: |
    COMMIT_URL="$CI_PROJECT_URL/commit/$CI_COMMIT_SHA"
    AUTHOR=$(git show -s --format="%an" HEAD)
    MESSAGE_TEXT=":red-light: datadog-agent-buildimages build failed in pipeline <$CI_PIPELINE_URL|$CI_PIPELINE_ID> for $CI_COMMIT_TITLE (<$COMMIT_URL|$CI_COMMIT_SHORT_SHA>) by $AUTHOR"
    if [ "$CI_PIPELINE_SOURCE" = "schedule" ]; then
      MESSAGE_TEXT="$MESSAGE_TEXT (this was a scheduled build)"
    fi
    postmessage "#agent-devx-ops" "$MESSAGE_TEXT"
