include: 'https://gitlab-templates.ddbuild.io/slack-notifier/v1/template.yml'

stages:
  - build
  - test
  - release
  - notify

variables:
  # To release Windows images, we need tools that are not necessarily present on the Windows Gitlab runners
  # (eg. updated versions of awscli, tools to sign images - if we decide to sign buildimages some day)
  # Thus, to release buildimages, we do the same thing as what we do in the Agent: we run the Docker publish script in
  # the buildimage for the highest Windows version supported.
  # This image must use the same Windows version as the Windows version of the Gitlab runner used in .winrelease
  WINDOWS_RELEASE_IMAGE: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/windows_ltsc2022_x64:v10180886-a9a8910
  S3_CP_CMD: aws s3 cp $S3_CP_OPTIONS
  S3_PERMANENT_ARTIFACTS_URI: s3://dd-ci-persistent-artefacts-build-stable/datadog-agent
  DATADOG_AGENT_EMBEDDED_PATH: /opt/datadog-agent/embedded
  S3_OMNIBUS_CACHE_BUCKET: dd-ci-datadog-agent-omnibus-cache-build-stable
  S3_OMNIBUS_CACHE_ANONYMOUS_ACCESS: "true"

.x64:
  tags: [ "runner:docker" ]
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/docker:20.10-py3
  variables:
    DD_TARGET_ARCH: x64

.arm:
  tags: ["runner:docker-arm", "platform:arm64"]
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/docker:20.10-py3
  variables:
    DD_TARGET_ARCH: aarch64

.build:
  stage: build
  except: [ tags ]
  script:
    # Dockerhub login
    - DOCKER_REGISTRY_LOGIN=$(aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.docker_hub_login --with-decryption --query "Parameter.Value" --out text)
    - aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.docker_hub_pwd --with-decryption --query "Parameter.Value" --out text | docker login --username "$DOCKER_REGISTRY_LOGIN" --password-stdin docker.io
    # ECR login
    - eval "$(aws ecr get-login --region us-east-1 --no-include-email --registry-ids 486234852809)"
    # Build
    - docker build --build-arg BASE_IMAGE=$BASE_IMAGE --build-arg DD_TARGET_ARCH=$DD_TARGET_ARCH --tag 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/$IMAGE:v$CI_PIPELINE_ID-${CI_COMMIT_SHA:0:7} --file $DOCKERFILE .
    - docker push 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/$IMAGE:v$CI_PIPELINE_ID-${CI_COMMIT_SHA:0:7}
    # For testing purposes
    - docker tag 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/$IMAGE:v$CI_PIPELINE_ID-${CI_COMMIT_SHA:0:7} 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/$IMAGE:v$CI_PIPELINE_ID
    - if [ "$CI_PIPELINE_SOURCE" != "schedule" ]; then docker push 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/$IMAGE:v$CI_PIPELINE_ID; fi

build_deb_x64:
  extends: [ .build, .x64 ]
  variables:
    DOCKERFILE: deb-x64/Dockerfile
    IMAGE: deb_x64

build_rpm_x64:
  extends: [ .build, .x64 ]
  variables:
    DOCKERFILE: rpm-x64/Dockerfile
    IMAGE: rpm_x64

build_suse_x64:
  extends: [ .build, .x64 ]
  variables:
    DOCKERFILE: suse-x64/Dockerfile
    IMAGE: suse_x64

build_deb_arm64:
  extends: [ .build, .arm ]
  variables:
    DOCKERFILE: deb-arm/Dockerfile
    IMAGE: deb_arm64
    BASE_IMAGE: arm64v8/ubuntu:16.04

build_deb_armhf:
  extends: [ .build, .arm ]
  variables:
    DOCKERFILE: deb-arm/Dockerfile
    IMAGE: deb_armhf
    BASE_IMAGE: arm32v7/ubuntu:16.04
    DD_TARGET_ARCH: armhf

build_rpm_arm64:
  extends: [ .build, .arm ]
  variables:
    DOCKERFILE: rpm-arm64/Dockerfile
    IMAGE: rpm_arm64
    BASE_IMAGE: amazonlinux:2.0.20181114

build_rpm_armhf:
  extends: [ .build, .arm ]
  variables:
    DOCKERFILE: rpm-armhf/Dockerfile
    IMAGE: rpm_armhf
    BASE_IMAGE: arm32v7/centos:7
    DD_TARGET_ARCH: armhf

build_system-probe_x64:
  extends: [ .build, .x64 ]
  variables:
    DOCKERFILE: system-probe_x64/Dockerfile
    IMAGE: system-probe_x64

build_system-probe_arm64:
  extends: [ .build, .arm ]
  variables:
    DOCKERFILE: system-probe_arm64/Dockerfile
    IMAGE: system-probe_arm64

build_omnibus-nikos_x64:
  extends: [ .build, .x64 ]
  variables:
    DOCKERFILE: omnibus-nikos_x64/Dockerfile
    IMAGE: omnibus-nikos_x64

build_omnibus-nikos_arm64:
  extends: [ .build, .arm ]
  variables:
    DOCKERFILE: omnibus-nikos_arm64/Dockerfile
    IMAGE: omnibus-nikos_arm64

build_datadog-ci-uploader:
  extends: [ .build, .x64 ]
  variables:
    DOCKERFILE: datadog-ci-uploader/Dockerfile
    IMAGE: datadog-ci-uploader

build_dd_agent_testing:
  extends: [ .build, .x64 ]
  variables:
    DOCKERFILE: dd-agent-testing/Dockerfile
    IMAGE: dd-agent-testing

build_docker_arm64:
  extends: [ .build, .arm ]
  variables:
    DOCKERFILE: docker-arm64/Dockerfile
    IMAGE: docker_arm64

build_docker_x64:
  extends: [ .build, .x64 ]
  variables:
    DOCKERFILE: docker-x64/Dockerfile
    IMAGE: docker_x64

.test:
  stage: test
  except: [ tags, schedules ]

.test_agent6:
  extends: .test
  before_script:
    - git clone https://github.com/DataDog/datadog-agent /go/src/github.com/DataDog/datadog-agent && cd /go/src/github.com/DataDog/datadog-agent
    - VERSION="nightly"
    - source /root/.bashrc && conda activate ddpy3
    - inv -e deps
  script:
    - inv -e agent.omnibus-build --release-version "$VERSION" --major-version "6" --python-runtimes "2,3" --base-dir /.omnibus --skip-deps

test_deb_x64:
  extends: .test_agent6
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/deb_x64:v$CI_PIPELINE_ID
  needs: [ "build_deb_x64" ]
  tags: [ "runner:main" ]

test_deb_arm64:
  extends: .test_agent6
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/deb_arm64:v$CI_PIPELINE_ID
  needs: [ "build_deb_arm64" ]
  tags: [ "runner:docker-arm", "platform:arm64" ]

test_rpm_x64:
  extends: .test_agent6
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/rpm_x64:v$CI_PIPELINE_ID
  needs: [ "build_rpm_x64" ]
  tags: [ "runner:main" ]

test_rpm_arm64:
  extends: .test_agent6
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/rpm_arm64:v$CI_PIPELINE_ID
  needs: [ "build_rpm_arm64" ]
  tags: [ "runner:docker-arm", "platform:arm64" ]

test_suse_x64:
  extends: .test_agent6
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/suse_x64:v$CI_PIPELINE_ID
  needs: [ "build_suse_x64" ]
  tags: [ "runner:main" ]

.test_system_probe:
  extends: .test
  before_script:
    - git clone https://github.com/DataDog/datadog-agent /go/src/github.com/DataDog/datadog-agent
    - cd /go/src/github.com/DataDog/datadog-agent
    - inv -e deps
  script:
    - inv -e system-probe.build

test_system-probe_x64:
  extends: .test_system_probe
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/system-probe_x64:v$CI_PIPELINE_ID
  needs: [ "build_system-probe_x64" ]
  tags: [ "runner:main" ]
  variables:
    ARCH: amd64

test_system-probe_arm64:
  extends: .test_system_probe
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/system-probe_arm64:v$CI_PIPELINE_ID
  needs: [ "build_system-probe_arm64" ]
  tags: [ "runner:docker-arm", "platform:arm64" ]
  variables:
    ARCH: arm64

.winbuild: &winbuild
  stage: build
  except: [ tags ]
  timeout: 2h 00m
  script:
    - '$_instance_id = (iwr  -UseBasicParsing http://169.254.169.254/latest/meta-data/instance-id).content ; Write-Host "Running on instance $($_instance_id)"'
    - $SHORT_CI_COMMIT_SHA = $($CI_COMMIT_SHA.Substring(0,7))
    - $SRC_TAG = "v$CI_PIPELINE_ID-$SHORT_CI_COMMIT_SHA"
    - $SRC_IMAGE = "486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/${IMAGE}:${SRC_TAG}"
    - .\build-container.ps1 -Arch $DD_TARGET_ARCH -Tag $SRC_IMAGE
    - If ($lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
    - If ($CI_PIPELINE_SOURCE -ne "schedule") { docker push $SRC_IMAGE } else { exit 0 }
    - If ($lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
  after_script:
    - docker rmi 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/${IMAGE}:v${CI_PIPELINE_ID}-$($CI_COMMIT_SHA.SubString(0,7))

build_windows_1809_x64:
  extends: .winbuild
  tags: [ "runner:windows-docker", "windowsversion:1809" ]
  variables:
    DOCKERFILE: windows/Dockerfile
    IMAGE: windows_1809_x64
    DD_TARGET_ARCH: x64

build_windows_1909_x64:
  extends: .winbuild
  tags: [ "runner:windows-docker", "windowsversion:1909" ]
  variables:
    DOCKERFILE: windows/Dockerfile
    IMAGE: windows_1909_x64
    DD_TARGET_ARCH: x64

build_windows_2004_x64:
  extends: .winbuild
  tags: [ "runner:windows-docker", "windowsversion:2004" ]
  variables:
    DOCKERFILE: windows/Dockerfile
    IMAGE: windows_2004_x64
    DD_TARGET_ARCH: x64

build_windows_20h2_x64:
  extends: .winbuild
  tags: [ "runner:windows-docker", "windowsversion:20h2" ]
  variables:
    DOCKERFILE: windows/Dockerfile
    IMAGE: windows_20h2_x64
    DD_TARGET_ARCH: x64

build_windows_ltsc2022_x64:
  extends: .winbuild
  tags: [ "runner:windows-docker", "windowsversion:2022" ]
  variables:
    DOCKERFILE: windows/Dockerfile
    IMAGE: windows_ltsc2022_x64
    DD_TARGET_ARCH: x64

.test_windows:
  extends: .test
  timeout: 2h 00m
  script:
    - '$_instance_id = (iwr  -UseBasicParsing http://169.254.169.254/latest/meta-data/instance-id).content ; Write-Host "Running on instance $($_instance_id)"'
    - if (Test-Path datadog-agent) { remove-item -recurse -force datadog-agent }
    - git clone https://github.com/DataDog/datadog-agent datadog-agent
    - cd datadog-agent
    - $VERSION="nightly"
    - docker run --rm -m 4096M -v "$(Get-Location):c:\mnt" -e CI_JOB_ID=${CI_JOB_ID} -e WINDOWS_BUILDER=true -e RELEASE_VERSION="$VERSION" -e MAJOR_VERSION="6" -e PY_RUNTIMES="2,3" -e AWS_NETWORKING=true -e SIGN_WINDOWS=true -e TARGET_ARCH="$ARCH" -e NEW_BUILDER=true -e S3_OMNIBUS_CACHE_BUCKET="${S3_OMNIBUS_CACHE_BUCKET}" -e S3_OMNIBUS_CACHE_ANONYMOUS_ACCESS="${S3_OMNIBUS_CACHE_ANONYMOUS_ACCESS}" 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/${IMAGE}:v${CI_PIPELINE_ID}-$($CI_COMMIT_SHA.SubString(0,7)) c:\mnt\tasks\winbuildscripts\buildwin.bat
    - If ($lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
  after_script:
    - if (Test-Path datadog-agent) { remove-item -recurse -force datadog-agent }
    - docker rmi 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/${IMAGE}:v${CI_PIPELINE_ID}-$($CI_COMMIT_SHA.SubString(0,7))

test_windows_1809_x64:
  extends: .test_windows
  tags: [ "runner:windows-docker", "windowsversion:1809" ]
  needs: [ "build_windows_1809_x64" ]
  variables:
    ARCH: x64
    IMAGE: windows_1809_x64

test_windows_1909_x64:
  extends: .test_windows
  tags: [ "runner:windows-docker", "windowsversion:1909" ]
  needs: [ "build_windows_1909_x64" ]
  variables:
    ARCH: x64
    IMAGE: windows_1909_x64

test_windows_2004_x64:
  extends: .test_windows
  tags: [ "runner:windows-docker", "windowsversion:2004" ]
  needs: [ "build_windows_2004_x64" ]
  variables:
    ARCH: x64
    IMAGE: windows_2004_x64

test_windows_20h2_x64:
  extends: .test_windows
  tags: [ "runner:windows-docker", "windowsversion:20h2" ]
  needs: [ "build_windows_20h2_x64" ]
  variables:
    ARCH: x64
    IMAGE: windows_20h2_x64

test_windows_ltsc2022_x64:
  extends: .test_windows
  tags: [ "runner:windows-docker", "windowsversion:2022" ]
  needs: [ "build_windows_ltsc2022_x64" ]
  variables:
    ARCH: x64
    IMAGE: windows_ltsc2022_x64

.release:
  stage: release
  except: [ tags, schedules ]
  only: [ master, main ]
  tags: [ "runner:docker" ]
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/docker-notary:0.6.1
  script:
    - SRC_IMAGE=486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/$IMAGE:v$CI_PIPELINE_ID-${CI_COMMIT_SHA:0:7}
    - docker pull $SRC_IMAGE
    - docker tag $SRC_IMAGE 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/$IMAGE:latest
    - docker push 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/$IMAGE:latest
    - DOCKER_REGISTRY_LOGIN=$(aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.docker_hub_login --with-decryption --query "Parameter.Value" --out text)
    - aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.docker_hub_pwd --with-decryption --query "Parameter.Value" --out text | docker login --username "$DOCKER_REGISTRY_LOGIN" --password-stdin docker.io
    - docker tag $SRC_IMAGE datadog/agent-buildimages-$IMAGE:v$CI_PIPELINE_ID-${CI_COMMIT_SHA:0:7}
    - docker push datadog/agent-buildimages-$IMAGE:v$CI_PIPELINE_ID-${CI_COMMIT_SHA:0:7}
    - docker tag $SRC_IMAGE datadog/agent-buildimages-$IMAGE:latest
    - docker push datadog/agent-buildimages-$IMAGE:latest
  after_script:
    - docker rmi 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/$IMAGE:v$CI_PIPELINE_ID-${CI_COMMIT_SHA:0:7} datadog/agent-buildimages-$IMAGE:v$CI_PIPELINE_ID-${CI_COMMIT_SHA:0:7} datadog/agent-buildimages-$IMAGE:latest

.winrelease:
  stage: release
  except: [ tags, schedules ]
  only: [ master, main ]
  ## this always needs to be the newest available builder version
  tags: [ "runner:windows-docker", "windowsversion:2022" ]
  script:
    - '$_instance_id = (iwr  -UseBasicParsing http://169.254.169.254/latest/meta-data/instance-id).content ; Write-Host "Running on instance $($_instance_id)"'
    - $SHORT_CI_COMMIT_SHA = $($CI_COMMIT_SHA.Substring(0,7))
    - $SRC_TAG = "v$CI_PIPELINE_ID-$SHORT_CI_COMMIT_SHA"
    - $SRC_IMAGE = "486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/${IMAGE}:${SRC_TAG}"
    - mkdir ci-scripts
    - docker pull $SRC_IMAGE
    - |
      @"
      Set-PSDebug -Trace 1
      `$ErrorActionPreference = "Stop"
      # ECR Login
      `$AWS_ECR_PASSWORD = aws ecr get-login-password --region us-east-1
      docker login --username AWS --password "`$AWS_ECR_PASSWORD" 486234852809.dkr.ecr.us-east-1.amazonaws.com
      # DockerHub login
      `$DOCKER_REGISTRY_LOGIN = aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.docker_hub_login --with-decryption --query "Parameter.Value" --out text
      `$DOCKER_REGISTRY_PWD = aws ssm get-parameter --region us-east-1 --name ci.datadog-agent.docker_hub_pwd --with-decryption --query "Parameter.Value" --out text
      docker login --username "`$DOCKER_REGISTRY_LOGIN" --password "`$DOCKER_REGISTRY_PWD" docker.io
      If (`$lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
      docker tag $SRC_IMAGE 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/${IMAGE}:latest
      docker push 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/${IMAGE}:latest
      If (`$lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
      If ("${DOCKERHUB_IMAGE}" -ne "") {
        docker tag $SRC_IMAGE datadog/${DOCKERHUB_IMAGE}:${DOCKERHUB_TAG_PREFIX}-${SRC_TAG}
        docker push datadog/${DOCKERHUB_IMAGE}:${DOCKERHUB_TAG_PREFIX}-${SRC_TAG}
        If (`$lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
        docker tag $SRC_IMAGE datadog/${DOCKERHUB_IMAGE}:${DOCKERHUB_TAG_PREFIX}
        docker push datadog/${DOCKERHUB_IMAGE}:${DOCKERHUB_TAG_PREFIX}
        If (`$lastExitCode -ne "0") { throw "Previous command returned `$lastExitCode" }
      }
      "@ | out-file ci-scripts/docker-publish.ps1
    - cat ci-scripts/docker-publish.ps1
    - docker run --rm -w C:\mnt -e AWS_NETWORKING=true -e SIGN_WINDOWS=true -v "$(Get-Location):C:\mnt" -v \\.\pipe\docker_engine:\\.\pipe\docker_engine $WINDOWS_RELEASE_IMAGE powershell -C C:\mnt\ci-scripts\docker-publish.ps1
  after_script:
    - $SHORT_CI_COMMIT_SHA = $($CI_COMMIT_SHA.Substring(0,7))
    - $SRC_TAG = "v$CI_PIPELINE_ID-$SHORT_CI_COMMIT_SHA"
    - $SRC_IMAGE = "486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/${IMAGE}:${SRC_TAG}"
    - docker rmi $SRC_IMAGE 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/${IMAGE}:latest
    - If ("${DOCKERHUB_IMAGE}" -ne "") { docker rmi datadog/${DOCKERHUB_IMAGE}:${DOCKERHUB_TAG_PREFIX}-${SRC_TAG} $SRC_IMAGE datadog/${DOCKERHUB_IMAGE}:${DOCKERHUB_TAG_PREFIX} }

release_deb_x64:
  extends: .release
  needs: [ "test_deb_x64" ]
  variables:
    IMAGE: deb_x64

release_rpm_x64:
  extends: .release
  needs: [ "test_rpm_x64" ]
  variables:
    IMAGE: rpm_x64

release_suse_x64:
  extends: .release
  needs: [ "test_suse_x64" ]
  variables:
    IMAGE: suse_x64

release_deb_arm64:
  extends: .release
  needs: [ "test_deb_arm64" ]
  variables:
    IMAGE: deb_arm64

release_rpm_arm64:
  extends: .release
  needs: [ "test_rpm_arm64" ]
  variables:
    IMAGE: rpm_arm64

release_datadog-ci-uploader:
  extends: .release
  needs: [ "build_datadog-ci-uploader" ]
  variables:
    IMAGE: datadog-ci-uploader

release_windows_1809_x64:
  extends: .winrelease
  needs: [ "test_windows_1809_x64" ]
  variables:
    IMAGE: windows_1809_x64
    DOCKERHUB_IMAGE: agent-buildimages-windows_x64
    DOCKERHUB_TAG_PREFIX: "1809"

release_windows_1909_x64:
  extends: .winrelease
  needs: [ "test_windows_1909_x64" ]
  variables:
    IMAGE: windows_1909_x64
    DOCKERHUB_IMAGE: agent-buildimages-windows_x64
    DOCKERHUB_TAG_PREFIX: "1909"

release_windows_2004_x64:
  extends: .winrelease
  needs: [ "test_windows_2004_x64" ]
  variables:
    IMAGE: windows_2004_x64
    DOCKERHUB_IMAGE: agent-buildimages-windows_x64
    DOCKERHUB_TAG_PREFIX: "2004"

release_windows_20h2_x64:
  extends: .winrelease
  needs: [ "test_windows_20h2_x64" ]
  variables:
    IMAGE: windows_20h2_x64
    DOCKERHUB_IMAGE: agent-buildimages-windows_x64
    DOCKERHUB_TAG_PREFIX: "20h2"

release_windows_ltsc2022_x64:
  extends: .winrelease
  needs: [ "test_windows_ltsc2022_x64" ]
  variables:
    IMAGE: windows_ltsc2022_x64
    DOCKERHUB_IMAGE: agent-buildimages-windows_x64
    DOCKERHUB_TAG_PREFIX: "ltsc2022"

notify-on-failure:
  extends: .slack-notifier-base
  rules:
    - if: $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "main"
      when: on_failure
  dependencies: []
  script: |
    COMMIT_URL="$CI_PROJECT_URL/commit/$CI_COMMIT_SHA"
    AUTHOR=$(git show -s --format="%an" HEAD)
    MESSAGE_TEXT=":red-light: datadog-agent-buildimages build failed for $CI_COMMIT_TITLE (<$COMMIT_URL|$CI_COMMIT_SHORT_SHA>) by $AUTHOR"
    if [ "$CI_PIPELINE_SOURCE" = "schedule" ]; then
      MESSAGE_TEXT="$MESSAGE_TEXT (this was a scheduled build)"
    fi
    postmessage "#agent-platform" "$MESSAGE_TEXT"
