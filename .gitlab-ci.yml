include: "https://gitlab-templates.ddbuild.io/slack-notifier/v3-sdm/template.yml"

stages:
  - availability_message

variables:
  # To release Windows images, we need tools that are not necessarily present on the Windows Gitlab runners
  # (eg. updated versions of awscli, tools to sign images - if we decide to sign buildimages some day)
  # Thus, to release buildimages, we do the same thing as what we do in the Agent: we run the Docker publish script in
  # the buildimage for the highest Windows version supported.
  # This image must use the same Windows version as the Windows version of the Gitlab runner used in .winrelease
  WINDOWS_RELEASE_IMAGE: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/windows_ltsc2022_x64
  SETUP_IMAGE_NAME: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/deb_x64:v19805261-b468a29 # Image used during setup task, must contains pyinvoke
  S3_CP_CMD: aws s3 cp $S3_CP_OPTIONS
  S3_PERMANENT_ARTIFACTS_URI: s3://dd-ci-persistent-artefacts-build-stable/datadog-agent
  DATADOG_AGENT_EMBEDDED_PATH: /opt/datadog-agent/embedded
  S3_OMNIBUS_CACHE_BUCKET: dd-ci-datadog-agent-omnibus-cache-build-stable
  S3_OMNIBUS_CACHE_ANONYMOUS_ACCESS: "true"
  EXTRA_KCONFIG_VERSION: "0.1"
  ECR_TEST_ONLY: "_test_only"


default:
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
      - unknown_failure
      - api_failure

notify-images-available:
  extends: .slack-notifier-base
  stage: availability_message # Created a new stage to depend upon all image builds without explicitely name them in 'needs'
  rules:
    - if: $CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "main"
      when: never
    - when: on_success
  dependencies: []
  script: |
    export MESSAGE="Your :docker: images with tag \`v$CI_PIPELINE_ID-${CI_COMMIT_SHORT_SHA}\` are ready.
    :idea: You can test them in the datadog-agent repository by running:
    \`\`\`inv pipeline.update-buildimages -i v$CI_PIPELINE_ID-${CI_COMMIT_SHORT_SHA} [--no-test-version] [--branch-name <your_branch>]\`\`\`
    "
    /usr/local/bin/notify.sh
