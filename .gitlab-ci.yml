---

stages:
  - setup

variables:
  # To release Windows images, we need tools that are not necessarily present on the Windows Gitlab runners
  # (eg. updated versions of awscli, tools to sign images - if we decide to sign buildimages some day)
  # Thus, to release buildimages, we do the same thing as what we do in the Agent: we run the Docker publish script in
  # the buildimage for the highest Windows version supported.
  # This image must use the same Windows version as the Windows version of the Gitlab runner used in .winrelease
  WINDOWS_RELEASE_IMAGE: $BUILDENV_REGISTRY/ci/datadog-agent-buildimages/windows_ltsc2022_x64
  SETUP_IMAGE_NAME: $BUILDENV_REGISTRY/ci/datadog-agent-buildimages/deb_x64:v19805261-b468a29 # Image used during setup task, must contains pyinvoke
  S3_CP_CMD: aws s3 cp $S3_CP_OPTIONS
  S3_PERMANENT_ARTIFACTS_URI: s3://dd-ci-persistent-artefacts-build-stable/datadog-agent
  DATADOG_AGENT_EMBEDDED_PATH: /opt/datadog-agent/embedded
  S3_OMNIBUS_CACHE_BUCKET: dd-ci-datadog-agent-omnibus-cache-build-stable
  S3_OMNIBUS_CACHE_ANONYMOUS_ACCESS: "true"
  EXTRA_KCONFIG_VERSION: "0.1"
  ECR_TEST_ONLY: "_test_only"
  CI_IMAGE_REPO: "ci/${CI_PROJECT_NAME}"
  CI_IMAGE: "${BUILDENV_REGISTRY}/${CI_IMAGE_REPO}:v30023992-5c09d40b@sha256:5a83247d330ea44b437eb207711561005ca08343ccf4aa523d3540fe01e095f6" # https://gitlab.ddbuild.io/DataDog/datadog-agent-buildimages/-/jobs/458723556
  IMAGE_VERSION: "v$CI_PIPELINE_ID-${CI_COMMIT_SHORT_SHA}"

default:
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
      - unknown_failure
      - api_failure

test_job:
  stage: setup
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/deb_x64:v58799063-651eeeea
  tags: ["arch:amd64"]
  script:
    - ls
    - ls /root
    - source /root/.bashrc
    - which python
    - which pip
    - export GITHUB_KEY_B64=$(aws ssm get-parameter --region us-east-1 --name $SSM_GITHUB_APP_KEY --with-decryption --query "Parameter.Value" --out text)
