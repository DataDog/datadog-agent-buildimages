---
stages:
  - build_kernels
  - upload_kernels


variables:
  IMAGE_VERSION: "v${PARENT_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}"
  LINUX_SRC_DIR: /tmp/kernel-src
  S3_CP_CMD: aws s3 cp $S3_CP_OPTIONS
  S3_DD_AGENT_OMNIBUS_KERNEL_VERSION_TESTING_URI: s3://dd-agent-omnibus/kernel-version-testing

.build_kernels:
  stage: build_kernels
  rules:
    - allow_failure: false
  script:
    # make sure that pahole is available
    - pahole --version
    # Fetch relevant kernel commit
    - mkdir $LINUX_SRC_DIR
    - pushd $(dirname $LINUX_SRC_DIR)
    - MAJOR=$(echo $TARGET_TAG | cut -d '.' -f 1 | tr -d 'v')
    - MINOR=$(echo $TARGET_TAG | cut -d '.' -f 2)
    - VERSION=$(echo $TARGET_TAG | cut -d 'v' -f 2)
    - TARGET_DIR=$(echo $LINUX_SRC_DIR | rev | cut -d '/' -f 1 | rev)
    - TARGET_ARCHIVE=$TARGET_DIR.tar.gz
    - wget -q -c "https://mirrors.edge.kernel.org/pub/linux/kernel/v$MAJOR.x/linux-$VERSION.tar.gz" -O $TARGET_ARCHIVE
    - tar -xf $TARGET_ARCHIVE -C $TARGET_DIR --strip-components=1
    - popd
    # Copy extra config to source directory
    - cp /extra.config-$PARENT_EXTRA_KCONFIG_VERSION $LINUX_SRC_DIR/extra.config
    # Build kernel
    - make -C $LINUX_SRC_DIR clean
    - make -C $LINUX_SRC_DIR ARCH=$ARCH KCONFIG_CONFIG=start.config defconfig
    - tee -a < $LINUX_SRC_DIR/extra.config $LINUX_SRC_DIR/start.config
    - make -C $LINUX_SRC_DIR allnoconfig KCONFIG_ALLCONFIG=start.config
    - if [[ "$ARCH" == "arm64" && $MAJOR -eq 4 && $MINOR -lt 9 ]]; then echo "kvm_guest.config target not available for $ARCH $TARGET_TAG"; else make -C $LINUX_SRC_DIR kvm_guest.config; fi
    - make -j$(nproc) -C $LINUX_SRC_DIR ARCH=$ARCH bindeb-pkg LOCALVERSION=-ddvm
    - mkdir kernel-$TARGET_TAG.$ARCH.pkg
    - cp $LINUX_SRC_DIR/arch/$ARCH/boot/$BZ_IMAGE kernel-$TARGET_TAG.$ARCH.pkg/bzImage
    - cp $LINUX_SRC_DIR/vmlinux kernel-$TARGET_TAG.$ARCH.pkg/vmlinux
    - find $LINUX_SRC_DIR/.. -name linux-headers-$(echo $TARGET_TAG | tr -d 'v')* -type f | xargs -i cp {} kernel-$TARGET_TAG.$ARCH.pkg/
    - find $LINUX_SRC_DIR/.. -name linux-image-$(echo $TARGET_TAG | tr -d 'v')* -type f | grep -Fv dbg | xargs -i cp {} kernel-$TARGET_TAG.$ARCH.pkg/
    - tar -czvf kernel-$TARGET_TAG.$ARCH.pkg.tar.gz kernel-$TARGET_TAG.$ARCH.pkg
  variables:
    TAGS_COMMITS_FILE: /tags-commits
  artifacts:
    paths:
      - kernel-$TARGET_TAG.$ARCH.pkg.tar.gz

build_kernels_x64:
  extends: .build_kernels
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/kernel-version-testing_x64${ECR_TEST_ONLY}:$IMAGE_VERSION
  tags: [ "runner:main" ]
  variables:
    ARCH: x86
    BZ_IMAGE: bzImage
  parallel:
    matrix:
      - TARGET_TAG: ["v5.0","v5.1","v5.2","v5.3","v5.4","v5.5","v5.6","v5.7","v5.8","v5.9","v5.10","v5.11","v5.12","v5.13","v5.14","v5.15","v5.16","v5.17","v5.18","v5.19","v4.4","v4.5","v4.6","v4.7","v4.8","v4.9","v4.10","v4.11","v4.12","v4.13","v4.14","v4.15","v4.16","v4.17","v4.18","v4.19","v4.20"]

build_kernels_arm64:
  extends: .build_kernels
  image: registry.ddbuild.io/ci/datadog-agent-buildimages/kernel-version-testing_arm64${ECR_TEST_ONLY}:$IMAGE_VERSION
  tags: ["docker-in-docker:arm64"]
  variables:
    ARCH: arm64
    BZ_IMAGE: Image.gz
  parallel:
    matrix:
      - TARGET_TAG: ["v5.0","v5.1","v5.2","v5.3","v5.4","v5.5","v5.6","v5.7","v5.8","v5.9","v5.10","v5.11","v5.12","v5.13","v5.14","v5.15","v5.16","v5.17","v5.18","v5.19","v4.4","v4.5","v4.6","v4.7","v4.8","v4.9","v4.10","v4.11","v4.12","v4.13","v4.14","v4.15","v4.16","v4.17","v4.18","v4.19","v4.20"]


upload_kernel_packages_x64:
  stage: upload_kernels
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/docker:20.10-py3
  tags: [ "runner:main" ]
  needs: [ "build_kernels_x64" ]
  script:
    - KARCH=$(echo $ARCH | cut -d '_' -f 1)
    - find . -name "kernel-*.${KARCH}.pkg.tar.gz" -type f | rev | cut -d '/' -f 1 | rev > packages.txt
    - DIR=$(dirname $(head -n 1 packages.txt))
    - cat packages.txt
    - cd $DIR; tar -cf $KERNEL_PKG_NAME -T packages.txt
    - sha256sum $KERNEL_PKG_NAME > $KERNEL_PKG_SUM
    - $S3_CP_CMD $KERNEL_PKG_NAME $S3_DD_AGENT_OMNIBUS_KERNEL_VERSION_TESTING_URI/$KERNEL_PKG_NAME --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers
    - $S3_CP_CMD $KERNEL_PKG_SUM $S3_DD_AGENT_OMNIBUS_KERNEL_VERSION_TESTING_URI/$KERNEL_PKG_SUM --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers
  variables:
    KERNEL_PKG_NAME: kernel-packages-$ARCH.tar
    KERNEL_PKG_SUM: kernel-packages-$ARCH.sum
    ARCH: "x86_64"

upload_kernel_packages_arm64:
  stage: upload_kernels
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/docker:20.10-py3
  tags: [ "runner:main" ]
  needs: [ "build_kernels_arm64" ]
  script:
    - KARCH=$(echo $ARCH | cut -d '_' -f 1)
    - find . -name "kernel-*.${KARCH}.pkg.tar.gz" -type f | rev | cut -d '/' -f 1 | rev > packages.txt
    - DIR=$(dirname $(head -n 1 packages.txt))
    - cat packages.txt
    - cd $DIR; tar -cf $KERNEL_PKG_NAME -T packages.txt
    - sha256sum $KERNEL_PKG_NAME > $KERNEL_PKG_SUM
    - $S3_CP_CMD $KERNEL_PKG_NAME $S3_DD_AGENT_OMNIBUS_KERNEL_VERSION_TESTING_URI/$KERNEL_PKG_NAME --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers
    - $S3_CP_CMD $KERNEL_PKG_SUM $S3_DD_AGENT_OMNIBUS_KERNEL_VERSION_TESTING_URI/$KERNEL_PKG_SUM --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers
  variables:
    KERNEL_PKG_NAME: kernel-packages-$ARCH.tar
    KERNEL_PKG_SUM: kernel-packages-$ARCH.sum
    ARCH: "arm64"
