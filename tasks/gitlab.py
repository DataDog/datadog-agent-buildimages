import yaml
import os
from invoke import task


@task
def generate_test(_, test=""):
    """
    Generate a gitlab yml configuration to trigger datadog-agent pipeline with only the modified images updated
    """
    with open(".gitlab/trigger_template.yml") as f:
        trigger_template = yaml.safe_load(f)
    built_images = list_built_images()
    trigger_template["trigger_datadog_agent"]["variables"] = update_variables(
        trigger_template["trigger_datadog_agent"]["variables"], built_images, test
    )
    print(f"Generated test with images: {built_images}")
    print(f"Gitlab configuration: {trigger_template}")
    with open("datadog-agent-trigger-gitlab-ci.yml", "w") as f:
        yaml.dump(trigger_template, f)


def list_built_images():
    """
    Reshape the artefacts generated by build stage to list what image has been built
    """
    return [
        file.removeprefix("built_").removesuffix(".txt").replace("-", "_").casefold()
        for file in os.listdir(os.environ["CI_PROJECT_DIR"])
        if file.startswith("built_")
    ]


def update_variables(variables, images, test):
    """
    Update the variables to be used by the trigger_datadog_agent job. We always update the former variables
    """
    version = f"v{os.environ['CI_PIPELINE_ID']}-{os.environ['CI_COMMIT_SHORT_SHA']}"
    for image in images:
        variable = f"CI_IMAGE_{image.upper()}"
        if variable in variables:
            # print(f"Updating {variable} to {version}")
            variables[variable] = version
            if test:
                variables[f"{variable}_SUFFIX"] = test
        else:
            print(f"WARNING variable {variable} not found in the template")
    # Update the former images as well
    for variable in variables:
        if variable.startswith("DATADOG_AGENT_") and not "SUFFIX" in variable:
            variables[variable] = version
            if test:
                variables[f"{variable}_SUFFIX"] = test
    return variables
